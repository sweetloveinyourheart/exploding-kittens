// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lobbyserver.proto

package grpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/sweetloveinyourheart/exploding-kittens/proto/code/lobbyserver/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LobbyServerName is the fully-qualified name of the LobbyServer service.
	LobbyServerName = "com.sweetloveinyourheart.kittens.lobbies.LobbyServer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LobbyServerGetLobbyDataProcedure is the fully-qualified name of the LobbyServer's GetLobbyData
	// RPC.
	LobbyServerGetLobbyDataProcedure = "/com.sweetloveinyourheart.kittens.lobbies.LobbyServer/GetLobbyData"
)

// LobbyServerClient is a client for the com.sweetloveinyourheart.kittens.lobbies.LobbyServer
// service.
type LobbyServerClient interface {
	// Get lobby data
	GetLobbyData(context.Context, *connect.Request[_go.GetLobbyDataRequest]) (*connect.Response[_go.GetLobbyDataResponse], error)
}

// NewLobbyServerClient constructs a client for the
// com.sweetloveinyourheart.kittens.lobbies.LobbyServer service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLobbyServerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LobbyServerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	lobbyServerMethods := _go.File_lobbyserver_proto.Services().ByName("LobbyServer").Methods()
	return &lobbyServerClient{
		getLobbyData: connect.NewClient[_go.GetLobbyDataRequest, _go.GetLobbyDataResponse](
			httpClient,
			baseURL+LobbyServerGetLobbyDataProcedure,
			connect.WithSchema(lobbyServerMethods.ByName("GetLobbyData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// lobbyServerClient implements LobbyServerClient.
type lobbyServerClient struct {
	getLobbyData *connect.Client[_go.GetLobbyDataRequest, _go.GetLobbyDataResponse]
}

// GetLobbyData calls com.sweetloveinyourheart.kittens.lobbies.LobbyServer.GetLobbyData.
func (c *lobbyServerClient) GetLobbyData(ctx context.Context, req *connect.Request[_go.GetLobbyDataRequest]) (*connect.Response[_go.GetLobbyDataResponse], error) {
	return c.getLobbyData.CallUnary(ctx, req)
}

// LobbyServerHandler is an implementation of the
// com.sweetloveinyourheart.kittens.lobbies.LobbyServer service.
type LobbyServerHandler interface {
	// Get lobby data
	GetLobbyData(context.Context, *connect.Request[_go.GetLobbyDataRequest]) (*connect.Response[_go.GetLobbyDataResponse], error)
}

// NewLobbyServerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLobbyServerHandler(svc LobbyServerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lobbyServerMethods := _go.File_lobbyserver_proto.Services().ByName("LobbyServer").Methods()
	lobbyServerGetLobbyDataHandler := connect.NewUnaryHandler(
		LobbyServerGetLobbyDataProcedure,
		svc.GetLobbyData,
		connect.WithSchema(lobbyServerMethods.ByName("GetLobbyData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.sweetloveinyourheart.kittens.lobbies.LobbyServer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LobbyServerGetLobbyDataProcedure:
			lobbyServerGetLobbyDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLobbyServerHandler returns CodeUnimplemented from all methods.
type UnimplementedLobbyServerHandler struct{}

func (UnimplementedLobbyServerHandler) GetLobbyData(context.Context, *connect.Request[_go.GetLobbyDataRequest]) (*connect.Response[_go.GetLobbyDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.lobbies.LobbyServer.GetLobbyData is not implemented"))
}
