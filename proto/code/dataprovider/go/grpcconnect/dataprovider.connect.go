// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dataprovider.proto

package grpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/sweetloveinyourheart/exploding-kittens/proto/code/dataprovider/go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataProviderName is the fully-qualified name of the DataProvider service.
	DataProviderName = "com.sweetloveinyourheart.kittens.dataproviders.DataProvider"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataProviderGetCardsProcedure is the fully-qualified name of the DataProvider's GetCards RPC.
	DataProviderGetCardsProcedure = "/com.sweetloveinyourheart.kittens.dataproviders.DataProvider/GetCards"
	// DataProviderGetMapCardsProcedure is the fully-qualified name of the DataProvider's GetMapCards
	// RPC.
	DataProviderGetMapCardsProcedure = "/com.sweetloveinyourheart.kittens.dataproviders.DataProvider/GetMapCards"
)

// DataProviderClient is a client for the
// com.sweetloveinyourheart.kittens.dataproviders.DataProvider service.
type DataProviderClient interface {
	// Get cards
	GetCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetCardsResponse], error)
	// Get cards as map
	GetMapCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetMapCardsResponse], error)
}

// NewDataProviderClient constructs a client for the
// com.sweetloveinyourheart.kittens.dataproviders.DataProvider service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataProviderClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataProviderClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataProviderMethods := _go.File_dataprovider_proto.Services().ByName("DataProvider").Methods()
	return &dataProviderClient{
		getCards: connect.NewClient[emptypb.Empty, _go.GetCardsResponse](
			httpClient,
			baseURL+DataProviderGetCardsProcedure,
			connect.WithSchema(dataProviderMethods.ByName("GetCards")),
			connect.WithClientOptions(opts...),
		),
		getMapCards: connect.NewClient[emptypb.Empty, _go.GetMapCardsResponse](
			httpClient,
			baseURL+DataProviderGetMapCardsProcedure,
			connect.WithSchema(dataProviderMethods.ByName("GetMapCards")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataProviderClient implements DataProviderClient.
type dataProviderClient struct {
	getCards    *connect.Client[emptypb.Empty, _go.GetCardsResponse]
	getMapCards *connect.Client[emptypb.Empty, _go.GetMapCardsResponse]
}

// GetCards calls com.sweetloveinyourheart.kittens.dataproviders.DataProvider.GetCards.
func (c *dataProviderClient) GetCards(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetCardsResponse], error) {
	return c.getCards.CallUnary(ctx, req)
}

// GetMapCards calls com.sweetloveinyourheart.kittens.dataproviders.DataProvider.GetMapCards.
func (c *dataProviderClient) GetMapCards(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetMapCardsResponse], error) {
	return c.getMapCards.CallUnary(ctx, req)
}

// DataProviderHandler is an implementation of the
// com.sweetloveinyourheart.kittens.dataproviders.DataProvider service.
type DataProviderHandler interface {
	// Get cards
	GetCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetCardsResponse], error)
	// Get cards as map
	GetMapCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetMapCardsResponse], error)
}

// NewDataProviderHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataProviderHandler(svc DataProviderHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataProviderMethods := _go.File_dataprovider_proto.Services().ByName("DataProvider").Methods()
	dataProviderGetCardsHandler := connect.NewUnaryHandler(
		DataProviderGetCardsProcedure,
		svc.GetCards,
		connect.WithSchema(dataProviderMethods.ByName("GetCards")),
		connect.WithHandlerOptions(opts...),
	)
	dataProviderGetMapCardsHandler := connect.NewUnaryHandler(
		DataProviderGetMapCardsProcedure,
		svc.GetMapCards,
		connect.WithSchema(dataProviderMethods.ByName("GetMapCards")),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.sweetloveinyourheart.kittens.dataproviders.DataProvider/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataProviderGetCardsProcedure:
			dataProviderGetCardsHandler.ServeHTTP(w, r)
		case DataProviderGetMapCardsProcedure:
			dataProviderGetMapCardsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataProviderHandler returns CodeUnimplemented from all methods.
type UnimplementedDataProviderHandler struct{}

func (UnimplementedDataProviderHandler) GetCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.dataproviders.DataProvider.GetCards is not implemented"))
}

func (UnimplementedDataProviderHandler) GetMapCards(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.GetMapCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.dataproviders.DataProvider.GetMapCards is not implemented"))
}
