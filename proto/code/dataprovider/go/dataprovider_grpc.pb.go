// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dataprovider.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataProvider_GetCards_FullMethodName    = "/com.sweetloveinyourheart.kittens.dataproviders.DataProvider/GetCards"
	DataProvider_GetMapCards_FullMethodName = "/com.sweetloveinyourheart.kittens.dataproviders.DataProvider/GetMapCards"
)

// DataProviderClient is the client API for DataProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProviderClient interface {
	// Get cards
	GetCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCardsResponse, error)
	// Get cards as map
	GetMapCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMapCardsResponse, error)
}

type dataProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProviderClient(cc grpc.ClientConnInterface) DataProviderClient {
	return &dataProviderClient{cc}
}

func (c *dataProviderClient) GetCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardsResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataProviderClient) GetMapCards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMapCardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMapCardsResponse)
	err := c.cc.Invoke(ctx, DataProvider_GetMapCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProviderServer is the server API for DataProvider service.
// All implementations should embed UnimplementedDataProviderServer
// for forward compatibility.
type DataProviderServer interface {
	// Get cards
	GetCards(context.Context, *emptypb.Empty) (*GetCardsResponse, error)
	// Get cards as map
	GetMapCards(context.Context, *emptypb.Empty) (*GetMapCardsResponse, error)
}

// UnimplementedDataProviderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataProviderServer struct{}

func (UnimplementedDataProviderServer) GetCards(context.Context, *emptypb.Empty) (*GetCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (UnimplementedDataProviderServer) GetMapCards(context.Context, *emptypb.Empty) (*GetMapCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapCards not implemented")
}
func (UnimplementedDataProviderServer) testEmbeddedByValue() {}

// UnsafeDataProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProviderServer will
// result in compilation errors.
type UnsafeDataProviderServer interface {
	mustEmbedUnimplementedDataProviderServer()
}

func RegisterDataProviderServer(s grpc.ServiceRegistrar, srv DataProviderServer) {
	// If the following call pancis, it indicates UnimplementedDataProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataProvider_ServiceDesc, srv)
}

func _DataProvider_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetCards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataProvider_GetMapCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServer).GetMapCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProvider_GetMapCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServer).GetMapCards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProvider_ServiceDesc is the grpc.ServiceDesc for DataProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.sweetloveinyourheart.kittens.dataproviders.DataProvider",
	HandlerType: (*DataProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCards",
			Handler:    _DataProvider_GetCards_Handler,
		},
		{
			MethodName: "GetMapCards",
			Handler:    _DataProvider_GetMapCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataprovider.proto",
}
