// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: clientserver.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientServer_RetrieveCardsData_FullMethodName  = "/com.sweetloveinyourheart.kittens.clients.ClientServer/RetrieveCardsData"
	ClientServer_CreateNewGuestUser_FullMethodName = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateNewGuestUser"
	ClientServer_GuestLogin_FullMethodName         = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GuestLogin"
	ClientServer_GetUserProfile_FullMethodName     = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetUserProfile"
	ClientServer_GetPlayersProfile_FullMethodName  = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetPlayersProfile"
	ClientServer_CreateLobby_FullMethodName        = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateLobby"
	ClientServer_GetLobby_FullMethodName           = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetLobby"
	ClientServer_StreamLobby_FullMethodName        = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StreamLobby"
	ClientServer_JoinLobby_FullMethodName          = "/com.sweetloveinyourheart.kittens.clients.ClientServer/JoinLobby"
	ClientServer_LeaveLobby_FullMethodName         = "/com.sweetloveinyourheart.kittens.clients.ClientServer/LeaveLobby"
	ClientServer_StartMatch_FullMethodName         = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StartMatch"
	ClientServer_GetGameMetaData_FullMethodName    = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetGameMetaData"
	ClientServer_StreamGame_FullMethodName         = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StreamGame"
	ClientServer_PlayCards_FullMethodName          = "/com.sweetloveinyourheart.kittens.clients.ClientServer/PlayCards"
	ClientServer_ExecuteAction_FullMethodName      = "/com.sweetloveinyourheart.kittens.clients.ClientServer/ExecuteAction"
)

// ClientServerClient is the client API for ClientServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServerClient interface {
	RetrieveCardsData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveCardsDataResponse, error)
	CreateNewGuestUser(ctx context.Context, in *CreateNewGuestUserRequest, opts ...grpc.CallOption) (*CreateNewGuestUserResponse, error)
	GuestLogin(ctx context.Context, in *GuestLoginRequest, opts ...grpc.CallOption) (*GuestLoginResponse, error)
	GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserProfileResponse, error)
	GetPlayersProfile(ctx context.Context, in *PlayersProfileRequest, opts ...grpc.CallOption) (*PlayersProfileResponse, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*GetLobbyReply, error)
	StreamLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLobbyReply], error)
	JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error)
	LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error)
	StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGameMetaData(ctx context.Context, in *GetGameMetaDataRequest, opts ...grpc.CallOption) (*GetGameMetaDataResponse, error)
	StreamGame(ctx context.Context, in *StreamGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGameReply], error)
	PlayCards(ctx context.Context, in *PlayCardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clientServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServerClient(cc grpc.ClientConnInterface) ClientServerClient {
	return &clientServerClient{cc}
}

func (c *clientServerClient) RetrieveCardsData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveCardsDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveCardsDataResponse)
	err := c.cc.Invoke(ctx, ClientServer_RetrieveCardsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) CreateNewGuestUser(ctx context.Context, in *CreateNewGuestUserRequest, opts ...grpc.CallOption) (*CreateNewGuestUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewGuestUserResponse)
	err := c.cc.Invoke(ctx, ClientServer_CreateNewGuestUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GuestLogin(ctx context.Context, in *GuestLoginRequest, opts ...grpc.CallOption) (*GuestLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestLoginResponse)
	err := c.cc.Invoke(ctx, ClientServer_GuestLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, ClientServer_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GetPlayersProfile(ctx context.Context, in *PlayersProfileRequest, opts ...grpc.CallOption) (*PlayersProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayersProfileResponse)
	err := c.cc.Invoke(ctx, ClientServer_GetPlayersProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, ClientServer_CreateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*GetLobbyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLobbyReply)
	err := c.cc.Invoke(ctx, ClientServer_GetLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) StreamLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLobbyReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientServer_ServiceDesc.Streams[0], ClientServer_StreamLobby_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetLobbyRequest, GetLobbyReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientServer_StreamLobbyClient = grpc.ServerStreamingClient[GetLobbyReply]

func (c *clientServerClient) JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinLobbyResponse)
	err := c.cc.Invoke(ctx, ClientServer_JoinLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveLobbyResponse)
	err := c.cc.Invoke(ctx, ClientServer_LeaveLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientServer_StartMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GetGameMetaData(ctx context.Context, in *GetGameMetaDataRequest, opts ...grpc.CallOption) (*GetGameMetaDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameMetaDataResponse)
	err := c.cc.Invoke(ctx, ClientServer_GetGameMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) StreamGame(ctx context.Context, in *StreamGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGameReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientServer_ServiceDesc.Streams[1], ClientServer_StreamGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGameRequest, StreamGameReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientServer_StreamGameClient = grpc.ServerStreamingClient[StreamGameReply]

func (c *clientServerClient) PlayCards(ctx context.Context, in *PlayCardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientServer_PlayCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientServer_ExecuteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServerServer is the server API for ClientServer service.
// All implementations should embed UnimplementedClientServerServer
// for forward compatibility.
type ClientServerServer interface {
	RetrieveCardsData(context.Context, *emptypb.Empty) (*RetrieveCardsDataResponse, error)
	CreateNewGuestUser(context.Context, *CreateNewGuestUserRequest) (*CreateNewGuestUserResponse, error)
	GuestLogin(context.Context, *GuestLoginRequest) (*GuestLoginResponse, error)
	GetUserProfile(context.Context, *emptypb.Empty) (*UserProfileResponse, error)
	GetPlayersProfile(context.Context, *PlayersProfileRequest) (*PlayersProfileResponse, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	GetLobby(context.Context, *GetLobbyRequest) (*GetLobbyReply, error)
	StreamLobby(*GetLobbyRequest, grpc.ServerStreamingServer[GetLobbyReply]) error
	JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error)
	LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error)
	StartMatch(context.Context, *StartMatchRequest) (*emptypb.Empty, error)
	GetGameMetaData(context.Context, *GetGameMetaDataRequest) (*GetGameMetaDataResponse, error)
	StreamGame(*StreamGameRequest, grpc.ServerStreamingServer[StreamGameReply]) error
	PlayCards(context.Context, *PlayCardsRequest) (*emptypb.Empty, error)
	ExecuteAction(context.Context, *ExecuteActionRequest) (*emptypb.Empty, error)
}

// UnimplementedClientServerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServerServer struct{}

func (UnimplementedClientServerServer) RetrieveCardsData(context.Context, *emptypb.Empty) (*RetrieveCardsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCardsData not implemented")
}
func (UnimplementedClientServerServer) CreateNewGuestUser(context.Context, *CreateNewGuestUserRequest) (*CreateNewGuestUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewGuestUser not implemented")
}
func (UnimplementedClientServerServer) GuestLogin(context.Context, *GuestLoginRequest) (*GuestLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestLogin not implemented")
}
func (UnimplementedClientServerServer) GetUserProfile(context.Context, *emptypb.Empty) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedClientServerServer) GetPlayersProfile(context.Context, *PlayersProfileRequest) (*PlayersProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersProfile not implemented")
}
func (UnimplementedClientServerServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedClientServerServer) GetLobby(context.Context, *GetLobbyRequest) (*GetLobbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLobby not implemented")
}
func (UnimplementedClientServerServer) StreamLobby(*GetLobbyRequest, grpc.ServerStreamingServer[GetLobbyReply]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLobby not implemented")
}
func (UnimplementedClientServerServer) JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedClientServerServer) LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLobby not implemented")
}
func (UnimplementedClientServerServer) StartMatch(context.Context, *StartMatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatch not implemented")
}
func (UnimplementedClientServerServer) GetGameMetaData(context.Context, *GetGameMetaDataRequest) (*GetGameMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameMetaData not implemented")
}
func (UnimplementedClientServerServer) StreamGame(*StreamGameRequest, grpc.ServerStreamingServer[StreamGameReply]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGame not implemented")
}
func (UnimplementedClientServerServer) PlayCards(context.Context, *PlayCardsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayCards not implemented")
}
func (UnimplementedClientServerServer) ExecuteAction(context.Context, *ExecuteActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedClientServerServer) testEmbeddedByValue() {}

// UnsafeClientServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServerServer will
// result in compilation errors.
type UnsafeClientServerServer interface {
	mustEmbedUnimplementedClientServerServer()
}

func RegisterClientServerServer(s grpc.ServiceRegistrar, srv ClientServerServer) {
	// If the following call pancis, it indicates UnimplementedClientServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientServer_ServiceDesc, srv)
}

func _ClientServer_RetrieveCardsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).RetrieveCardsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_RetrieveCardsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).RetrieveCardsData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_CreateNewGuestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewGuestUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).CreateNewGuestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_CreateNewGuestUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).CreateNewGuestUser(ctx, req.(*CreateNewGuestUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GuestLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GuestLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GuestLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GuestLogin(ctx, req.(*GuestLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GetUserProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GetPlayersProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayersProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GetPlayersProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GetPlayersProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GetPlayersProfile(ctx, req.(*PlayersProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GetLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GetLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GetLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GetLobby(ctx, req.(*GetLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_StreamLobby_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLobbyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServerServer).StreamLobby(m, &grpc.GenericServerStream[GetLobbyRequest, GetLobbyReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientServer_StreamLobbyServer = grpc.ServerStreamingServer[GetLobbyReply]

func _ClientServer_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_JoinLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).JoinLobby(ctx, req.(*JoinLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_LeaveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).LeaveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_LeaveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).LeaveLobby(ctx, req.(*LeaveLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_StartMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).StartMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_StartMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).StartMatch(ctx, req.(*StartMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GetGameMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GetGameMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GetGameMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GetGameMetaData(ctx, req.(*GetGameMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_StreamGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServerServer).StreamGame(m, &grpc.GenericServerStream[StreamGameRequest, StreamGameReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientServer_StreamGameServer = grpc.ServerStreamingServer[StreamGameReply]

func _ClientServer_PlayCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).PlayCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_PlayCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).PlayCards(ctx, req.(*PlayCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_ExecuteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).ExecuteAction(ctx, req.(*ExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServer_ServiceDesc is the grpc.ServiceDesc for ClientServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.sweetloveinyourheart.kittens.clients.ClientServer",
	HandlerType: (*ClientServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveCardsData",
			Handler:    _ClientServer_RetrieveCardsData_Handler,
		},
		{
			MethodName: "CreateNewGuestUser",
			Handler:    _ClientServer_CreateNewGuestUser_Handler,
		},
		{
			MethodName: "GuestLogin",
			Handler:    _ClientServer_GuestLogin_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _ClientServer_GetUserProfile_Handler,
		},
		{
			MethodName: "GetPlayersProfile",
			Handler:    _ClientServer_GetPlayersProfile_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _ClientServer_CreateLobby_Handler,
		},
		{
			MethodName: "GetLobby",
			Handler:    _ClientServer_GetLobby_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _ClientServer_JoinLobby_Handler,
		},
		{
			MethodName: "LeaveLobby",
			Handler:    _ClientServer_LeaveLobby_Handler,
		},
		{
			MethodName: "StartMatch",
			Handler:    _ClientServer_StartMatch_Handler,
		},
		{
			MethodName: "GetGameMetaData",
			Handler:    _ClientServer_GetGameMetaData_Handler,
		},
		{
			MethodName: "PlayCards",
			Handler:    _ClientServer_PlayCards_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _ClientServer_ExecuteAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLobby",
			Handler:       _ClientServer_StreamLobby_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGame",
			Handler:       _ClientServer_StreamGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clientserver.proto",
}
