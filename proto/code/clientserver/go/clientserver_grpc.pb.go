// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: clientserver.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientServer_CreateNewGuestUser_FullMethodName = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateNewGuestUser"
	ClientServer_GuestLogin_FullMethodName         = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GuestLogin"
	ClientServer_GetPlayerProfile_FullMethodName   = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetPlayerProfile"
	ClientServer_CreateLobby_FullMethodName        = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateLobby"
)

// ClientServerClient is the client API for ClientServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServerClient interface {
	CreateNewGuestUser(ctx context.Context, in *CreateNewGuestUserRequest, opts ...grpc.CallOption) (*CreateNewGuestUserResponse, error)
	GuestLogin(ctx context.Context, in *GuestLoginRequest, opts ...grpc.CallOption) (*GuestLoginResponse, error)
	GetPlayerProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerProfileResponse, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
}

type clientServerClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServerClient(cc grpc.ClientConnInterface) ClientServerClient {
	return &clientServerClient{cc}
}

func (c *clientServerClient) CreateNewGuestUser(ctx context.Context, in *CreateNewGuestUserRequest, opts ...grpc.CallOption) (*CreateNewGuestUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewGuestUserResponse)
	err := c.cc.Invoke(ctx, ClientServer_CreateNewGuestUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GuestLogin(ctx context.Context, in *GuestLoginRequest, opts ...grpc.CallOption) (*GuestLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestLoginResponse)
	err := c.cc.Invoke(ctx, ClientServer_GuestLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) GetPlayerProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PlayerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerProfileResponse)
	err := c.cc.Invoke(ctx, ClientServer_GetPlayerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServerClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, ClientServer_CreateLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServerServer is the server API for ClientServer service.
// All implementations should embed UnimplementedClientServerServer
// for forward compatibility.
type ClientServerServer interface {
	CreateNewGuestUser(context.Context, *CreateNewGuestUserRequest) (*CreateNewGuestUserResponse, error)
	GuestLogin(context.Context, *GuestLoginRequest) (*GuestLoginResponse, error)
	GetPlayerProfile(context.Context, *emptypb.Empty) (*PlayerProfileResponse, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
}

// UnimplementedClientServerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServerServer struct{}

func (UnimplementedClientServerServer) CreateNewGuestUser(context.Context, *CreateNewGuestUserRequest) (*CreateNewGuestUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewGuestUser not implemented")
}
func (UnimplementedClientServerServer) GuestLogin(context.Context, *GuestLoginRequest) (*GuestLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestLogin not implemented")
}
func (UnimplementedClientServerServer) GetPlayerProfile(context.Context, *emptypb.Empty) (*PlayerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerProfile not implemented")
}
func (UnimplementedClientServerServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedClientServerServer) testEmbeddedByValue() {}

// UnsafeClientServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServerServer will
// result in compilation errors.
type UnsafeClientServerServer interface {
	mustEmbedUnimplementedClientServerServer()
}

func RegisterClientServerServer(s grpc.ServiceRegistrar, srv ClientServerServer) {
	// If the following call pancis, it indicates UnimplementedClientServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientServer_ServiceDesc, srv)
}

func _ClientServer_CreateNewGuestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewGuestUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).CreateNewGuestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_CreateNewGuestUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).CreateNewGuestUser(ctx, req.(*CreateNewGuestUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GuestLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GuestLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GuestLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GuestLogin(ctx, req.(*GuestLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_GetPlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).GetPlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_GetPlayerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).GetPlayerProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServer_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServerServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServer_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServerServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServer_ServiceDesc is the grpc.ServiceDesc for ClientServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.sweetloveinyourheart.kittens.clients.ClientServer",
	HandlerType: (*ClientServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewGuestUser",
			Handler:    _ClientServer_CreateNewGuestUser_Handler,
		},
		{
			MethodName: "GuestLogin",
			Handler:    _ClientServer_GuestLogin_Handler,
		},
		{
			MethodName: "GetPlayerProfile",
			Handler:    _ClientServer_GetPlayerProfile_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _ClientServer_CreateLobby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientserver.proto",
}
