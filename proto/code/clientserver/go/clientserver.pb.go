// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: clientserver.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Game_Phase int32

const (
	Game_INITIALIZING Game_Phase = 0 // Setting up players, shuffling and dealing cards, inserting Exploding Kittens and Defuse cards into the deck
	Game_TURN_START   Game_Phase = 1 // Active player begins their turn
	Game_ACTION_PHASE Game_Phase = 2 // Player can play as many action cards as they want
	Game_CARD_DRAWING Game_Phase = 3 // Player draws one card from the deck (mandatory if they didn't Skip/Attack)
	Game_TURN_END     Game_Phase = 4 // Finalize the turn, next player becomes active
	Game_GAME_OVER    Game_Phase = 5 // When only one player remains
)

// Enum value maps for Game_Phase.
var (
	Game_Phase_name = map[int32]string{
		0: "INITIALIZING",
		1: "TURN_START",
		2: "ACTION_PHASE",
		3: "CARD_DRAWING",
		4: "TURN_END",
		5: "GAME_OVER",
	}
	Game_Phase_value = map[string]int32{
		"INITIALIZING": 0,
		"TURN_START":   1,
		"ACTION_PHASE": 2,
		"CARD_DRAWING": 3,
		"TURN_END":     4,
		"GAME_OVER":    5,
	}
)

func (x Game_Phase) Enum() *Game_Phase {
	p := new(Game_Phase)
	*p = x
	return p
}

func (x Game_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Game_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_clientserver_proto_enumTypes[0].Descriptor()
}

func (Game_Phase) Type() protoreflect.EnumType {
	return &file_clientserver_proto_enumTypes[0]
}

func (x Game_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Game_Phase.Descriptor instead.
func (Game_Phase) EnumDescriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{20, 0}
}

type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardId        string                 `protobuf:"bytes,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_clientserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *Card) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Card) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Card) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RetrieveCardsDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*Card                `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveCardsDataResponse) Reset() {
	*x = RetrieveCardsDataResponse{}
	mi := &file_clientserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveCardsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCardsDataResponse) ProtoMessage() {}

func (x *RetrieveCardsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCardsDataResponse.ProtoReflect.Descriptor instead.
func (*RetrieveCardsDataResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{1}
}

func (x *RetrieveCardsDataResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FullName      string                 `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_clientserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Message for creating a new guest user
type CreateNewGuestUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                 // Required: Username of the guest user
	FullName      string                 `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"` // Required: Full name of the guest user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNewGuestUserRequest) Reset() {
	*x = CreateNewGuestUserRequest{}
	mi := &file_clientserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewGuestUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewGuestUserRequest) ProtoMessage() {}

func (x *CreateNewGuestUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewGuestUserRequest.ProtoReflect.Descriptor instead.
func (*CreateNewGuestUserRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNewGuestUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateNewGuestUserRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type CreateNewGuestUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"` // The user basic info
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNewGuestUserResponse) Reset() {
	*x = CreateNewGuestUserResponse{}
	mi := &file_clientserver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewGuestUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewGuestUserResponse) ProtoMessage() {}

func (x *CreateNewGuestUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewGuestUserResponse.ProtoReflect.Descriptor instead.
func (*CreateNewGuestUserResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNewGuestUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Message for guest login
type GuestLoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Required: UUID of the guest user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuestLoginRequest) Reset() {
	*x = GuestLoginRequest{}
	mi := &file_clientserver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestLoginRequest) ProtoMessage() {}

func (x *GuestLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestLoginRequest.ProtoReflect.Descriptor instead.
func (*GuestLoginRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{5}
}

func (x *GuestLoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GuestLoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`   // The user basic info
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"` // The session token for this user.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuestLoginResponse) Reset() {
	*x = GuestLoginResponse{}
	mi := &file_clientserver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuestLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestLoginResponse) ProtoMessage() {}

func (x *GuestLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestLoginResponse.ProtoReflect.Descriptor instead.
func (*GuestLoginResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{6}
}

func (x *GuestLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuestLoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserProfileResponse) Reset() {
	*x = UserProfileResponse{}
	mi := &file_clientserver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileResponse) ProtoMessage() {}

func (x *UserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileResponse.ProtoReflect.Descriptor instead.
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{7}
}

func (x *UserProfileResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Message for players profile
type PlayersProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"` // Required: UUID of the guest user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayersProfileRequest) Reset() {
	*x = PlayersProfileRequest{}
	mi := &file_clientserver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayersProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersProfileRequest) ProtoMessage() {}

func (x *PlayersProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersProfileRequest.ProtoReflect.Descriptor instead.
func (*PlayersProfileRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{8}
}

func (x *PlayersProfileRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type PlayersProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayersProfileResponse) Reset() {
	*x = PlayersProfileResponse{}
	mi := &file_clientserver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayersProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersProfileResponse) ProtoMessage() {}

func (x *PlayersProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersProfileResponse.ProtoReflect.Descriptor instead.
func (*PlayersProfileResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{9}
}

func (x *PlayersProfileResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type Lobby struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	LobbyCode     string                 `protobuf:"bytes,2,opt,name=lobby_code,json=lobbyCode,proto3" json:"lobby_code,omitempty"`
	LobbyName     string                 `protobuf:"bytes,3,opt,name=lobby_name,json=lobbyName,proto3" json:"lobby_name,omitempty"`
	HostUserId    string                 `protobuf:"bytes,4,opt,name=host_user_id,json=hostUserId,proto3" json:"host_user_id,omitempty"`
	Participants  []string               `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
	MatchId       *string                `protobuf:"bytes,6,opt,name=match_id,json=matchId,proto3,oneof" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lobby) Reset() {
	*x = Lobby{}
	mi := &file_clientserver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lobby) ProtoMessage() {}

func (x *Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lobby.ProtoReflect.Descriptor instead.
func (*Lobby) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{10}
}

func (x *Lobby) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *Lobby) GetLobbyCode() string {
	if x != nil {
		return x.LobbyCode
	}
	return ""
}

func (x *Lobby) GetLobbyName() string {
	if x != nil {
		return x.LobbyName
	}
	return ""
}

func (x *Lobby) GetHostUserId() string {
	if x != nil {
		return x.HostUserId
	}
	return ""
}

func (x *Lobby) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Lobby) GetMatchId() string {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return ""
}

// Message for create a lobby
type CreateLobbyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyName     string                 `protobuf:"bytes,1,opt,name=lobby_name,json=lobbyName,proto3" json:"lobby_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLobbyRequest) Reset() {
	*x = CreateLobbyRequest{}
	mi := &file_clientserver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLobbyRequest) ProtoMessage() {}

func (x *CreateLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLobbyRequest.ProtoReflect.Descriptor instead.
func (*CreateLobbyRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{11}
}

func (x *CreateLobbyRequest) GetLobbyName() string {
	if x != nil {
		return x.LobbyName
	}
	return ""
}

type CreateLobbyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLobbyResponse) Reset() {
	*x = CreateLobbyResponse{}
	mi := &file_clientserver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLobbyResponse) ProtoMessage() {}

func (x *CreateLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLobbyResponse.ProtoReflect.Descriptor instead.
func (*CreateLobbyResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{12}
}

func (x *CreateLobbyResponse) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type GetLobbyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLobbyRequest) Reset() {
	*x = GetLobbyRequest{}
	mi := &file_clientserver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLobbyRequest) ProtoMessage() {}

func (x *GetLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLobbyRequest.ProtoReflect.Descriptor instead.
func (*GetLobbyRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type GetLobbyReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lobby         *Lobby                 `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLobbyReply) Reset() {
	*x = GetLobbyReply{}
	mi := &file_clientserver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLobbyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLobbyReply) ProtoMessage() {}

func (x *GetLobbyReply) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLobbyReply.ProtoReflect.Descriptor instead.
func (*GetLobbyReply) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{14}
}

func (x *GetLobbyReply) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

// Message for join a lobby
type JoinLobbyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyCode     string                 `protobuf:"bytes,1,opt,name=lobby_code,json=lobbyCode,proto3" json:"lobby_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinLobbyRequest) Reset() {
	*x = JoinLobbyRequest{}
	mi := &file_clientserver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLobbyRequest) ProtoMessage() {}

func (x *JoinLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLobbyRequest.ProtoReflect.Descriptor instead.
func (*JoinLobbyRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{15}
}

func (x *JoinLobbyRequest) GetLobbyCode() string {
	if x != nil {
		return x.LobbyCode
	}
	return ""
}

type JoinLobbyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinLobbyResponse) Reset() {
	*x = JoinLobbyResponse{}
	mi := &file_clientserver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLobbyResponse) ProtoMessage() {}

func (x *JoinLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLobbyResponse.ProtoReflect.Descriptor instead.
func (*JoinLobbyResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{16}
}

func (x *JoinLobbyResponse) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

// Message for leave a lobby
type LeaveLobbyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveLobbyRequest) Reset() {
	*x = LeaveLobbyRequest{}
	mi := &file_clientserver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveLobbyRequest) ProtoMessage() {}

func (x *LeaveLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveLobbyRequest.ProtoReflect.Descriptor instead.
func (*LeaveLobbyRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{17}
}

func (x *LeaveLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type LeaveLobbyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveLobbyResponse) Reset() {
	*x = LeaveLobbyResponse{}
	mi := &file_clientserver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveLobbyResponse) ProtoMessage() {}

func (x *LeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*LeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{18}
}

func (x *LeaveLobbyResponse) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

// Message for start a match
type StartMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMatchRequest) Reset() {
	*x = StartMatchRequest{}
	mi := &file_clientserver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchRequest) ProtoMessage() {}

func (x *StartMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchRequest.ProtoReflect.Descriptor instead.
func (*StartMatchRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{19}
}

func (x *StartMatchRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type Game struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	GameId          string                      `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GamePhase       Game_Phase                  `protobuf:"varint,2,opt,name=game_phase,json=gamePhase,proto3,enum=com.sweetloveinyourheart.kittens.clients.Game_Phase" json:"game_phase,omitempty"`
	PlayerTurn      string                      `protobuf:"bytes,3,opt,name=player_turn,json=playerTurn,proto3" json:"player_turn,omitempty"`
	Players         []*Game_Player              `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	PlayerHands     map[string]*Game_PlayerHand `protobuf:"bytes,5,rep,name=player_hands,json=playerHands,proto3" json:"player_hands,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Desk            *Game_Desk                  `protobuf:"bytes,6,opt,name=desk,proto3" json:"desk,omitempty"`
	ExecutingAction string                      `protobuf:"bytes,7,opt,name=executing_action,json=executingAction,proto3" json:"executing_action,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Game) Reset() {
	*x = Game{}
	mi := &file_clientserver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{20}
}

func (x *Game) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Game) GetGamePhase() Game_Phase {
	if x != nil {
		return x.GamePhase
	}
	return Game_INITIALIZING
}

func (x *Game) GetPlayerTurn() string {
	if x != nil {
		return x.PlayerTurn
	}
	return ""
}

func (x *Game) GetPlayers() []*Game_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Game) GetPlayerHands() map[string]*Game_PlayerHand {
	if x != nil {
		return x.PlayerHands
	}
	return nil
}

func (x *Game) GetDesk() *Game_Desk {
	if x != nil {
		return x.Desk
	}
	return nil
}

func (x *Game) GetExecutingAction() string {
	if x != nil {
		return x.ExecutingAction
	}
	return ""
}

type GameMetaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Players       []string               `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameMetaData) Reset() {
	*x = GameMetaData{}
	mi := &file_clientserver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMetaData) ProtoMessage() {}

func (x *GameMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMetaData.ProtoReflect.Descriptor instead.
func (*GameMetaData) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{21}
}

func (x *GameMetaData) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameMetaData) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

type StreamGameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamGameRequest) Reset() {
	*x = StreamGameRequest{}
	mi := &file_clientserver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGameRequest) ProtoMessage() {}

func (x *StreamGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGameRequest.ProtoReflect.Descriptor instead.
func (*StreamGameRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{22}
}

func (x *StreamGameRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type StreamGameReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameState     *Game                  `protobuf:"bytes,1,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamGameReply) Reset() {
	*x = StreamGameReply{}
	mi := &file_clientserver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGameReply) ProtoMessage() {}

func (x *StreamGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGameReply.ProtoReflect.Descriptor instead.
func (*StreamGameReply) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{23}
}

func (x *StreamGameReply) GetGameState() *Game {
	if x != nil {
		return x.GameState
	}
	return nil
}

type GetGameMetaDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGameMetaDataRequest) Reset() {
	*x = GetGameMetaDataRequest{}
	mi := &file_clientserver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameMetaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameMetaDataRequest) ProtoMessage() {}

func (x *GetGameMetaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameMetaDataRequest.ProtoReflect.Descriptor instead.
func (*GetGameMetaDataRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{24}
}

func (x *GetGameMetaDataRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type GetGameMetaDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          *GameMetaData          `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGameMetaDataResponse) Reset() {
	*x = GetGameMetaDataResponse{}
	mi := &file_clientserver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameMetaDataResponse) ProtoMessage() {}

func (x *GetGameMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameMetaDataResponse.ProtoReflect.Descriptor instead.
func (*GetGameMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{25}
}

func (x *GetGameMetaDataResponse) GetMeta() *GameMetaData {
	if x != nil {
		return x.Meta
	}
	return nil
}

// ========== Game Play ===========
type PlayCardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CardIds       []string               `protobuf:"bytes,2,rep,name=card_ids,json=cardIds,proto3" json:"card_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayCardsRequest) Reset() {
	*x = PlayCardsRequest{}
	mi := &file_clientserver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCardsRequest) ProtoMessage() {}

func (x *PlayCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCardsRequest.ProtoReflect.Descriptor instead.
func (*PlayCardsRequest) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{26}
}

func (x *PlayCardsRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *PlayCardsRequest) GetCardIds() []string {
	if x != nil {
		return x.CardIds
	}
	return nil
}

type Game_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Active        bool                   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Game_Player) Reset() {
	*x = Game_Player{}
	mi := &file_clientserver_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game_Player) ProtoMessage() {}

func (x *Game_Player) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game_Player.ProtoReflect.Descriptor instead.
func (*Game_Player) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Game_Player) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Game_Player) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type Game_PlayerHand struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RemainingCards int32                  `protobuf:"varint,1,opt,name=remaining_cards,json=remainingCards,proto3" json:"remaining_cards,omitempty"`
	Hands          []string               `protobuf:"bytes,2,rep,name=hands,proto3" json:"hands,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Game_PlayerHand) Reset() {
	*x = Game_PlayerHand{}
	mi := &file_clientserver_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game_PlayerHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game_PlayerHand) ProtoMessage() {}

func (x *Game_PlayerHand) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game_PlayerHand.ProtoReflect.Descriptor instead.
func (*Game_PlayerHand) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{20, 1}
}

func (x *Game_PlayerHand) GetRemainingCards() int32 {
	if x != nil {
		return x.RemainingCards
	}
	return 0
}

func (x *Game_PlayerHand) GetHands() []string {
	if x != nil {
		return x.Hands
	}
	return nil
}

type Game_Desk struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DeskId         string                 `protobuf:"bytes,1,opt,name=desk_id,json=deskId,proto3" json:"desk_id,omitempty"`
	RemainingCards int32                  `protobuf:"varint,2,opt,name=remaining_cards,json=remainingCards,proto3" json:"remaining_cards,omitempty"`
	DiscardPile    []string               `protobuf:"bytes,3,rep,name=discard_pile,json=discardPile,proto3" json:"discard_pile,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Game_Desk) Reset() {
	*x = Game_Desk{}
	mi := &file_clientserver_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game_Desk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game_Desk) ProtoMessage() {}

func (x *Game_Desk) ProtoReflect() protoreflect.Message {
	mi := &file_clientserver_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game_Desk.ProtoReflect.Descriptor instead.
func (*Game_Desk) Descriptor() ([]byte, []int) {
	return file_clientserver_proto_rawDescGZIP(), []int{20, 2}
}

func (x *Game_Desk) GetDeskId() string {
	if x != nil {
		return x.DeskId
	}
	return ""
}

func (x *Game_Desk) GetRemainingCards() int32 {
	if x != nil {
		return x.RemainingCards
	}
	return 0
}

func (x *Game_Desk) GetDiscardPile() []string {
	if x != nil {
		return x.DiscardPile
	}
	return nil
}

var File_clientserver_proto protoreflect.FileDescriptor

var file_clientserver_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c,
	0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f,
	0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79,
	0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x11, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x6e, 0x0a, 0x12, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65,
	0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x59, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x15,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x5e, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x22, 0xd3, 0x01, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x05,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x22, 0x31, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x9e, 0x07, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79,
	0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x4f, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65,
	0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x62, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f,
	0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x65, 0x73, 0x6b, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x4b, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x1a, 0x6b, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x69, 0x6c,
	0x65, 0x1a, 0x79, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x05,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x22, 0x41, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65,
	0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x65,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77,
	0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x32, 0xb8, 0x0e,
	0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x70,
	0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x43, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77,
	0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f,
	0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76,
	0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e,
	0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f,
	0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x3c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e,
	0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f,
	0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77,
	0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f,
	0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65,
	0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30,
	0x01, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69,
	0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77,
	0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74,
	0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65,
	0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75,
	0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79,
	0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x2e, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x65, 0x65, 0x74,
	0x6c, 0x6f, 0x76, 0x65, 0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2e,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x77, 0x65, 0x65, 0x74, 0x6c, 0x6f, 0x76, 0x65,
	0x69, 0x6e, 0x79, 0x6f, 0x75, 0x72, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_clientserver_proto_rawDescOnce sync.Once
	file_clientserver_proto_rawDescData []byte
)

func file_clientserver_proto_rawDescGZIP() []byte {
	file_clientserver_proto_rawDescOnce.Do(func() {
		file_clientserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_clientserver_proto_rawDesc), len(file_clientserver_proto_rawDesc)))
	})
	return file_clientserver_proto_rawDescData
}

var file_clientserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clientserver_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_clientserver_proto_goTypes = []any{
	(Game_Phase)(0),                    // 0: com.sweetloveinyourheart.kittens.clients.Game.Phase
	(*Card)(nil),                       // 1: com.sweetloveinyourheart.kittens.clients.Card
	(*RetrieveCardsDataResponse)(nil),  // 2: com.sweetloveinyourheart.kittens.clients.RetrieveCardsDataResponse
	(*User)(nil),                       // 3: com.sweetloveinyourheart.kittens.clients.User
	(*CreateNewGuestUserRequest)(nil),  // 4: com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest
	(*CreateNewGuestUserResponse)(nil), // 5: com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse
	(*GuestLoginRequest)(nil),          // 6: com.sweetloveinyourheart.kittens.clients.GuestLoginRequest
	(*GuestLoginResponse)(nil),         // 7: com.sweetloveinyourheart.kittens.clients.GuestLoginResponse
	(*UserProfileResponse)(nil),        // 8: com.sweetloveinyourheart.kittens.clients.UserProfileResponse
	(*PlayersProfileRequest)(nil),      // 9: com.sweetloveinyourheart.kittens.clients.PlayersProfileRequest
	(*PlayersProfileResponse)(nil),     // 10: com.sweetloveinyourheart.kittens.clients.PlayersProfileResponse
	(*Lobby)(nil),                      // 11: com.sweetloveinyourheart.kittens.clients.Lobby
	(*CreateLobbyRequest)(nil),         // 12: com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest
	(*CreateLobbyResponse)(nil),        // 13: com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse
	(*GetLobbyRequest)(nil),            // 14: com.sweetloveinyourheart.kittens.clients.GetLobbyRequest
	(*GetLobbyReply)(nil),              // 15: com.sweetloveinyourheart.kittens.clients.GetLobbyReply
	(*JoinLobbyRequest)(nil),           // 16: com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest
	(*JoinLobbyResponse)(nil),          // 17: com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse
	(*LeaveLobbyRequest)(nil),          // 18: com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest
	(*LeaveLobbyResponse)(nil),         // 19: com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse
	(*StartMatchRequest)(nil),          // 20: com.sweetloveinyourheart.kittens.clients.StartMatchRequest
	(*Game)(nil),                       // 21: com.sweetloveinyourheart.kittens.clients.Game
	(*GameMetaData)(nil),               // 22: com.sweetloveinyourheart.kittens.clients.GameMetaData
	(*StreamGameRequest)(nil),          // 23: com.sweetloveinyourheart.kittens.clients.StreamGameRequest
	(*StreamGameReply)(nil),            // 24: com.sweetloveinyourheart.kittens.clients.StreamGameReply
	(*GetGameMetaDataRequest)(nil),     // 25: com.sweetloveinyourheart.kittens.clients.GetGameMetaDataRequest
	(*GetGameMetaDataResponse)(nil),    // 26: com.sweetloveinyourheart.kittens.clients.GetGameMetaDataResponse
	(*PlayCardsRequest)(nil),           // 27: com.sweetloveinyourheart.kittens.clients.PlayCardsRequest
	(*Game_Player)(nil),                // 28: com.sweetloveinyourheart.kittens.clients.Game.Player
	(*Game_PlayerHand)(nil),            // 29: com.sweetloveinyourheart.kittens.clients.Game.PlayerHand
	(*Game_Desk)(nil),                  // 30: com.sweetloveinyourheart.kittens.clients.Game.Desk
	nil,                                // 31: com.sweetloveinyourheart.kittens.clients.Game.PlayerHandsEntry
	(*emptypb.Empty)(nil),              // 32: google.protobuf.Empty
}
var file_clientserver_proto_depIdxs = []int32{
	1,  // 0: com.sweetloveinyourheart.kittens.clients.RetrieveCardsDataResponse.cards:type_name -> com.sweetloveinyourheart.kittens.clients.Card
	3,  // 1: com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse.user:type_name -> com.sweetloveinyourheart.kittens.clients.User
	3,  // 2: com.sweetloveinyourheart.kittens.clients.GuestLoginResponse.user:type_name -> com.sweetloveinyourheart.kittens.clients.User
	3,  // 3: com.sweetloveinyourheart.kittens.clients.UserProfileResponse.user:type_name -> com.sweetloveinyourheart.kittens.clients.User
	3,  // 4: com.sweetloveinyourheart.kittens.clients.PlayersProfileResponse.users:type_name -> com.sweetloveinyourheart.kittens.clients.User
	11, // 5: com.sweetloveinyourheart.kittens.clients.GetLobbyReply.lobby:type_name -> com.sweetloveinyourheart.kittens.clients.Lobby
	0,  // 6: com.sweetloveinyourheart.kittens.clients.Game.game_phase:type_name -> com.sweetloveinyourheart.kittens.clients.Game.Phase
	28, // 7: com.sweetloveinyourheart.kittens.clients.Game.players:type_name -> com.sweetloveinyourheart.kittens.clients.Game.Player
	31, // 8: com.sweetloveinyourheart.kittens.clients.Game.player_hands:type_name -> com.sweetloveinyourheart.kittens.clients.Game.PlayerHandsEntry
	30, // 9: com.sweetloveinyourheart.kittens.clients.Game.desk:type_name -> com.sweetloveinyourheart.kittens.clients.Game.Desk
	21, // 10: com.sweetloveinyourheart.kittens.clients.StreamGameReply.game_state:type_name -> com.sweetloveinyourheart.kittens.clients.Game
	22, // 11: com.sweetloveinyourheart.kittens.clients.GetGameMetaDataResponse.meta:type_name -> com.sweetloveinyourheart.kittens.clients.GameMetaData
	29, // 12: com.sweetloveinyourheart.kittens.clients.Game.PlayerHandsEntry.value:type_name -> com.sweetloveinyourheart.kittens.clients.Game.PlayerHand
	32, // 13: com.sweetloveinyourheart.kittens.clients.ClientServer.RetrieveCardsData:input_type -> google.protobuf.Empty
	4,  // 14: com.sweetloveinyourheart.kittens.clients.ClientServer.CreateNewGuestUser:input_type -> com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest
	6,  // 15: com.sweetloveinyourheart.kittens.clients.ClientServer.GuestLogin:input_type -> com.sweetloveinyourheart.kittens.clients.GuestLoginRequest
	32, // 16: com.sweetloveinyourheart.kittens.clients.ClientServer.GetUserProfile:input_type -> google.protobuf.Empty
	9,  // 17: com.sweetloveinyourheart.kittens.clients.ClientServer.GetPlayersProfile:input_type -> com.sweetloveinyourheart.kittens.clients.PlayersProfileRequest
	12, // 18: com.sweetloveinyourheart.kittens.clients.ClientServer.CreateLobby:input_type -> com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest
	14, // 19: com.sweetloveinyourheart.kittens.clients.ClientServer.GetLobby:input_type -> com.sweetloveinyourheart.kittens.clients.GetLobbyRequest
	14, // 20: com.sweetloveinyourheart.kittens.clients.ClientServer.StreamLobby:input_type -> com.sweetloveinyourheart.kittens.clients.GetLobbyRequest
	16, // 21: com.sweetloveinyourheart.kittens.clients.ClientServer.JoinLobby:input_type -> com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest
	18, // 22: com.sweetloveinyourheart.kittens.clients.ClientServer.LeaveLobby:input_type -> com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest
	20, // 23: com.sweetloveinyourheart.kittens.clients.ClientServer.StartMatch:input_type -> com.sweetloveinyourheart.kittens.clients.StartMatchRequest
	25, // 24: com.sweetloveinyourheart.kittens.clients.ClientServer.GetGameMetaData:input_type -> com.sweetloveinyourheart.kittens.clients.GetGameMetaDataRequest
	23, // 25: com.sweetloveinyourheart.kittens.clients.ClientServer.StreamGame:input_type -> com.sweetloveinyourheart.kittens.clients.StreamGameRequest
	27, // 26: com.sweetloveinyourheart.kittens.clients.ClientServer.PlayCards:input_type -> com.sweetloveinyourheart.kittens.clients.PlayCardsRequest
	2,  // 27: com.sweetloveinyourheart.kittens.clients.ClientServer.RetrieveCardsData:output_type -> com.sweetloveinyourheart.kittens.clients.RetrieveCardsDataResponse
	5,  // 28: com.sweetloveinyourheart.kittens.clients.ClientServer.CreateNewGuestUser:output_type -> com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse
	7,  // 29: com.sweetloveinyourheart.kittens.clients.ClientServer.GuestLogin:output_type -> com.sweetloveinyourheart.kittens.clients.GuestLoginResponse
	8,  // 30: com.sweetloveinyourheart.kittens.clients.ClientServer.GetUserProfile:output_type -> com.sweetloveinyourheart.kittens.clients.UserProfileResponse
	10, // 31: com.sweetloveinyourheart.kittens.clients.ClientServer.GetPlayersProfile:output_type -> com.sweetloveinyourheart.kittens.clients.PlayersProfileResponse
	13, // 32: com.sweetloveinyourheart.kittens.clients.ClientServer.CreateLobby:output_type -> com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse
	15, // 33: com.sweetloveinyourheart.kittens.clients.ClientServer.GetLobby:output_type -> com.sweetloveinyourheart.kittens.clients.GetLobbyReply
	15, // 34: com.sweetloveinyourheart.kittens.clients.ClientServer.StreamLobby:output_type -> com.sweetloveinyourheart.kittens.clients.GetLobbyReply
	17, // 35: com.sweetloveinyourheart.kittens.clients.ClientServer.JoinLobby:output_type -> com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse
	19, // 36: com.sweetloveinyourheart.kittens.clients.ClientServer.LeaveLobby:output_type -> com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse
	32, // 37: com.sweetloveinyourheart.kittens.clients.ClientServer.StartMatch:output_type -> google.protobuf.Empty
	26, // 38: com.sweetloveinyourheart.kittens.clients.ClientServer.GetGameMetaData:output_type -> com.sweetloveinyourheart.kittens.clients.GetGameMetaDataResponse
	24, // 39: com.sweetloveinyourheart.kittens.clients.ClientServer.StreamGame:output_type -> com.sweetloveinyourheart.kittens.clients.StreamGameReply
	32, // 40: com.sweetloveinyourheart.kittens.clients.ClientServer.PlayCards:output_type -> google.protobuf.Empty
	27, // [27:41] is the sub-list for method output_type
	13, // [13:27] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_clientserver_proto_init() }
func file_clientserver_proto_init() {
	if File_clientserver_proto != nil {
		return
	}
	file_clientserver_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_clientserver_proto_rawDesc), len(file_clientserver_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientserver_proto_goTypes,
		DependencyIndexes: file_clientserver_proto_depIdxs,
		EnumInfos:         file_clientserver_proto_enumTypes,
		MessageInfos:      file_clientserver_proto_msgTypes,
	}.Build()
	File_clientserver_proto = out.File
	file_clientserver_proto_goTypes = nil
	file_clientserver_proto_depIdxs = nil
}
