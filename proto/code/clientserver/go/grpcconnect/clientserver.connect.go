// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clientserver.proto

package grpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/sweetloveinyourheart/exploding-kittens/proto/code/clientserver/go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClientServerName is the fully-qualified name of the ClientServer service.
	ClientServerName = "com.sweetloveinyourheart.kittens.clients.ClientServer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientServerRetrieveCardsDataProcedure is the fully-qualified name of the ClientServer's
	// RetrieveCardsData RPC.
	ClientServerRetrieveCardsDataProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/RetrieveCardsData"
	// ClientServerCreateNewGuestUserProcedure is the fully-qualified name of the ClientServer's
	// CreateNewGuestUser RPC.
	ClientServerCreateNewGuestUserProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateNewGuestUser"
	// ClientServerGuestLoginProcedure is the fully-qualified name of the ClientServer's GuestLogin RPC.
	ClientServerGuestLoginProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GuestLogin"
	// ClientServerGetUserProfileProcedure is the fully-qualified name of the ClientServer's
	// GetUserProfile RPC.
	ClientServerGetUserProfileProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetUserProfile"
	// ClientServerGetPlayersProfileProcedure is the fully-qualified name of the ClientServer's
	// GetPlayersProfile RPC.
	ClientServerGetPlayersProfileProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetPlayersProfile"
	// ClientServerCreateLobbyProcedure is the fully-qualified name of the ClientServer's CreateLobby
	// RPC.
	ClientServerCreateLobbyProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/CreateLobby"
	// ClientServerGetLobbyProcedure is the fully-qualified name of the ClientServer's GetLobby RPC.
	ClientServerGetLobbyProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetLobby"
	// ClientServerStreamLobbyProcedure is the fully-qualified name of the ClientServer's StreamLobby
	// RPC.
	ClientServerStreamLobbyProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StreamLobby"
	// ClientServerJoinLobbyProcedure is the fully-qualified name of the ClientServer's JoinLobby RPC.
	ClientServerJoinLobbyProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/JoinLobby"
	// ClientServerLeaveLobbyProcedure is the fully-qualified name of the ClientServer's LeaveLobby RPC.
	ClientServerLeaveLobbyProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/LeaveLobby"
	// ClientServerStartMatchProcedure is the fully-qualified name of the ClientServer's StartMatch RPC.
	ClientServerStartMatchProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StartMatch"
	// ClientServerGetGameMetaDataProcedure is the fully-qualified name of the ClientServer's
	// GetGameMetaData RPC.
	ClientServerGetGameMetaDataProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/GetGameMetaData"
	// ClientServerStreamGameProcedure is the fully-qualified name of the ClientServer's StreamGame RPC.
	ClientServerStreamGameProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/StreamGame"
	// ClientServerPlayCardsProcedure is the fully-qualified name of the ClientServer's PlayCards RPC.
	ClientServerPlayCardsProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/PlayCards"
	// ClientServerExecuteActionProcedure is the fully-qualified name of the ClientServer's
	// ExecuteAction RPC.
	ClientServerExecuteActionProcedure = "/com.sweetloveinyourheart.kittens.clients.ClientServer/ExecuteAction"
)

// ClientServerClient is a client for the com.sweetloveinyourheart.kittens.clients.ClientServer
// service.
type ClientServerClient interface {
	RetrieveCardsData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.RetrieveCardsDataResponse], error)
	CreateNewGuestUser(context.Context, *connect.Request[_go.CreateNewGuestUserRequest]) (*connect.Response[_go.CreateNewGuestUserResponse], error)
	GuestLogin(context.Context, *connect.Request[_go.GuestLoginRequest]) (*connect.Response[_go.GuestLoginResponse], error)
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.UserProfileResponse], error)
	GetPlayersProfile(context.Context, *connect.Request[_go.PlayersProfileRequest]) (*connect.Response[_go.PlayersProfileResponse], error)
	CreateLobby(context.Context, *connect.Request[_go.CreateLobbyRequest]) (*connect.Response[_go.CreateLobbyResponse], error)
	GetLobby(context.Context, *connect.Request[_go.GetLobbyRequest]) (*connect.Response[_go.GetLobbyReply], error)
	StreamLobby(context.Context, *connect.Request[_go.GetLobbyRequest]) (*connect.ServerStreamForClient[_go.GetLobbyReply], error)
	JoinLobby(context.Context, *connect.Request[_go.JoinLobbyRequest]) (*connect.Response[_go.JoinLobbyResponse], error)
	LeaveLobby(context.Context, *connect.Request[_go.LeaveLobbyRequest]) (*connect.Response[_go.LeaveLobbyResponse], error)
	StartMatch(context.Context, *connect.Request[_go.StartMatchRequest]) (*connect.Response[emptypb.Empty], error)
	GetGameMetaData(context.Context, *connect.Request[_go.GetGameMetaDataRequest]) (*connect.Response[_go.GetGameMetaDataResponse], error)
	StreamGame(context.Context, *connect.Request[_go.StreamGameRequest]) (*connect.ServerStreamForClient[_go.StreamGameReply], error)
	PlayCards(context.Context, *connect.Request[_go.PlayCardsRequest]) (*connect.Response[emptypb.Empty], error)
	ExecuteAction(context.Context, *connect.Request[_go.ExecuteActionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewClientServerClient constructs a client for the
// com.sweetloveinyourheart.kittens.clients.ClientServer service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientServerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientServerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clientServerMethods := _go.File_clientserver_proto.Services().ByName("ClientServer").Methods()
	return &clientServerClient{
		retrieveCardsData: connect.NewClient[emptypb.Empty, _go.RetrieveCardsDataResponse](
			httpClient,
			baseURL+ClientServerRetrieveCardsDataProcedure,
			connect.WithSchema(clientServerMethods.ByName("RetrieveCardsData")),
			connect.WithClientOptions(opts...),
		),
		createNewGuestUser: connect.NewClient[_go.CreateNewGuestUserRequest, _go.CreateNewGuestUserResponse](
			httpClient,
			baseURL+ClientServerCreateNewGuestUserProcedure,
			connect.WithSchema(clientServerMethods.ByName("CreateNewGuestUser")),
			connect.WithClientOptions(opts...),
		),
		guestLogin: connect.NewClient[_go.GuestLoginRequest, _go.GuestLoginResponse](
			httpClient,
			baseURL+ClientServerGuestLoginProcedure,
			connect.WithSchema(clientServerMethods.ByName("GuestLogin")),
			connect.WithClientOptions(opts...),
		),
		getUserProfile: connect.NewClient[emptypb.Empty, _go.UserProfileResponse](
			httpClient,
			baseURL+ClientServerGetUserProfileProcedure,
			connect.WithSchema(clientServerMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
		getPlayersProfile: connect.NewClient[_go.PlayersProfileRequest, _go.PlayersProfileResponse](
			httpClient,
			baseURL+ClientServerGetPlayersProfileProcedure,
			connect.WithSchema(clientServerMethods.ByName("GetPlayersProfile")),
			connect.WithClientOptions(opts...),
		),
		createLobby: connect.NewClient[_go.CreateLobbyRequest, _go.CreateLobbyResponse](
			httpClient,
			baseURL+ClientServerCreateLobbyProcedure,
			connect.WithSchema(clientServerMethods.ByName("CreateLobby")),
			connect.WithClientOptions(opts...),
		),
		getLobby: connect.NewClient[_go.GetLobbyRequest, _go.GetLobbyReply](
			httpClient,
			baseURL+ClientServerGetLobbyProcedure,
			connect.WithSchema(clientServerMethods.ByName("GetLobby")),
			connect.WithClientOptions(opts...),
		),
		streamLobby: connect.NewClient[_go.GetLobbyRequest, _go.GetLobbyReply](
			httpClient,
			baseURL+ClientServerStreamLobbyProcedure,
			connect.WithSchema(clientServerMethods.ByName("StreamLobby")),
			connect.WithClientOptions(opts...),
		),
		joinLobby: connect.NewClient[_go.JoinLobbyRequest, _go.JoinLobbyResponse](
			httpClient,
			baseURL+ClientServerJoinLobbyProcedure,
			connect.WithSchema(clientServerMethods.ByName("JoinLobby")),
			connect.WithClientOptions(opts...),
		),
		leaveLobby: connect.NewClient[_go.LeaveLobbyRequest, _go.LeaveLobbyResponse](
			httpClient,
			baseURL+ClientServerLeaveLobbyProcedure,
			connect.WithSchema(clientServerMethods.ByName("LeaveLobby")),
			connect.WithClientOptions(opts...),
		),
		startMatch: connect.NewClient[_go.StartMatchRequest, emptypb.Empty](
			httpClient,
			baseURL+ClientServerStartMatchProcedure,
			connect.WithSchema(clientServerMethods.ByName("StartMatch")),
			connect.WithClientOptions(opts...),
		),
		getGameMetaData: connect.NewClient[_go.GetGameMetaDataRequest, _go.GetGameMetaDataResponse](
			httpClient,
			baseURL+ClientServerGetGameMetaDataProcedure,
			connect.WithSchema(clientServerMethods.ByName("GetGameMetaData")),
			connect.WithClientOptions(opts...),
		),
		streamGame: connect.NewClient[_go.StreamGameRequest, _go.StreamGameReply](
			httpClient,
			baseURL+ClientServerStreamGameProcedure,
			connect.WithSchema(clientServerMethods.ByName("StreamGame")),
			connect.WithClientOptions(opts...),
		),
		playCards: connect.NewClient[_go.PlayCardsRequest, emptypb.Empty](
			httpClient,
			baseURL+ClientServerPlayCardsProcedure,
			connect.WithSchema(clientServerMethods.ByName("PlayCards")),
			connect.WithClientOptions(opts...),
		),
		executeAction: connect.NewClient[_go.ExecuteActionRequest, emptypb.Empty](
			httpClient,
			baseURL+ClientServerExecuteActionProcedure,
			connect.WithSchema(clientServerMethods.ByName("ExecuteAction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clientServerClient implements ClientServerClient.
type clientServerClient struct {
	retrieveCardsData  *connect.Client[emptypb.Empty, _go.RetrieveCardsDataResponse]
	createNewGuestUser *connect.Client[_go.CreateNewGuestUserRequest, _go.CreateNewGuestUserResponse]
	guestLogin         *connect.Client[_go.GuestLoginRequest, _go.GuestLoginResponse]
	getUserProfile     *connect.Client[emptypb.Empty, _go.UserProfileResponse]
	getPlayersProfile  *connect.Client[_go.PlayersProfileRequest, _go.PlayersProfileResponse]
	createLobby        *connect.Client[_go.CreateLobbyRequest, _go.CreateLobbyResponse]
	getLobby           *connect.Client[_go.GetLobbyRequest, _go.GetLobbyReply]
	streamLobby        *connect.Client[_go.GetLobbyRequest, _go.GetLobbyReply]
	joinLobby          *connect.Client[_go.JoinLobbyRequest, _go.JoinLobbyResponse]
	leaveLobby         *connect.Client[_go.LeaveLobbyRequest, _go.LeaveLobbyResponse]
	startMatch         *connect.Client[_go.StartMatchRequest, emptypb.Empty]
	getGameMetaData    *connect.Client[_go.GetGameMetaDataRequest, _go.GetGameMetaDataResponse]
	streamGame         *connect.Client[_go.StreamGameRequest, _go.StreamGameReply]
	playCards          *connect.Client[_go.PlayCardsRequest, emptypb.Empty]
	executeAction      *connect.Client[_go.ExecuteActionRequest, emptypb.Empty]
}

// RetrieveCardsData calls com.sweetloveinyourheart.kittens.clients.ClientServer.RetrieveCardsData.
func (c *clientServerClient) RetrieveCardsData(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[_go.RetrieveCardsDataResponse], error) {
	return c.retrieveCardsData.CallUnary(ctx, req)
}

// CreateNewGuestUser calls
// com.sweetloveinyourheart.kittens.clients.ClientServer.CreateNewGuestUser.
func (c *clientServerClient) CreateNewGuestUser(ctx context.Context, req *connect.Request[_go.CreateNewGuestUserRequest]) (*connect.Response[_go.CreateNewGuestUserResponse], error) {
	return c.createNewGuestUser.CallUnary(ctx, req)
}

// GuestLogin calls com.sweetloveinyourheart.kittens.clients.ClientServer.GuestLogin.
func (c *clientServerClient) GuestLogin(ctx context.Context, req *connect.Request[_go.GuestLoginRequest]) (*connect.Response[_go.GuestLoginResponse], error) {
	return c.guestLogin.CallUnary(ctx, req)
}

// GetUserProfile calls com.sweetloveinyourheart.kittens.clients.ClientServer.GetUserProfile.
func (c *clientServerClient) GetUserProfile(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[_go.UserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// GetPlayersProfile calls com.sweetloveinyourheart.kittens.clients.ClientServer.GetPlayersProfile.
func (c *clientServerClient) GetPlayersProfile(ctx context.Context, req *connect.Request[_go.PlayersProfileRequest]) (*connect.Response[_go.PlayersProfileResponse], error) {
	return c.getPlayersProfile.CallUnary(ctx, req)
}

// CreateLobby calls com.sweetloveinyourheart.kittens.clients.ClientServer.CreateLobby.
func (c *clientServerClient) CreateLobby(ctx context.Context, req *connect.Request[_go.CreateLobbyRequest]) (*connect.Response[_go.CreateLobbyResponse], error) {
	return c.createLobby.CallUnary(ctx, req)
}

// GetLobby calls com.sweetloveinyourheart.kittens.clients.ClientServer.GetLobby.
func (c *clientServerClient) GetLobby(ctx context.Context, req *connect.Request[_go.GetLobbyRequest]) (*connect.Response[_go.GetLobbyReply], error) {
	return c.getLobby.CallUnary(ctx, req)
}

// StreamLobby calls com.sweetloveinyourheart.kittens.clients.ClientServer.StreamLobby.
func (c *clientServerClient) StreamLobby(ctx context.Context, req *connect.Request[_go.GetLobbyRequest]) (*connect.ServerStreamForClient[_go.GetLobbyReply], error) {
	return c.streamLobby.CallServerStream(ctx, req)
}

// JoinLobby calls com.sweetloveinyourheart.kittens.clients.ClientServer.JoinLobby.
func (c *clientServerClient) JoinLobby(ctx context.Context, req *connect.Request[_go.JoinLobbyRequest]) (*connect.Response[_go.JoinLobbyResponse], error) {
	return c.joinLobby.CallUnary(ctx, req)
}

// LeaveLobby calls com.sweetloveinyourheart.kittens.clients.ClientServer.LeaveLobby.
func (c *clientServerClient) LeaveLobby(ctx context.Context, req *connect.Request[_go.LeaveLobbyRequest]) (*connect.Response[_go.LeaveLobbyResponse], error) {
	return c.leaveLobby.CallUnary(ctx, req)
}

// StartMatch calls com.sweetloveinyourheart.kittens.clients.ClientServer.StartMatch.
func (c *clientServerClient) StartMatch(ctx context.Context, req *connect.Request[_go.StartMatchRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startMatch.CallUnary(ctx, req)
}

// GetGameMetaData calls com.sweetloveinyourheart.kittens.clients.ClientServer.GetGameMetaData.
func (c *clientServerClient) GetGameMetaData(ctx context.Context, req *connect.Request[_go.GetGameMetaDataRequest]) (*connect.Response[_go.GetGameMetaDataResponse], error) {
	return c.getGameMetaData.CallUnary(ctx, req)
}

// StreamGame calls com.sweetloveinyourheart.kittens.clients.ClientServer.StreamGame.
func (c *clientServerClient) StreamGame(ctx context.Context, req *connect.Request[_go.StreamGameRequest]) (*connect.ServerStreamForClient[_go.StreamGameReply], error) {
	return c.streamGame.CallServerStream(ctx, req)
}

// PlayCards calls com.sweetloveinyourheart.kittens.clients.ClientServer.PlayCards.
func (c *clientServerClient) PlayCards(ctx context.Context, req *connect.Request[_go.PlayCardsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.playCards.CallUnary(ctx, req)
}

// ExecuteAction calls com.sweetloveinyourheart.kittens.clients.ClientServer.ExecuteAction.
func (c *clientServerClient) ExecuteAction(ctx context.Context, req *connect.Request[_go.ExecuteActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.executeAction.CallUnary(ctx, req)
}

// ClientServerHandler is an implementation of the
// com.sweetloveinyourheart.kittens.clients.ClientServer service.
type ClientServerHandler interface {
	RetrieveCardsData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.RetrieveCardsDataResponse], error)
	CreateNewGuestUser(context.Context, *connect.Request[_go.CreateNewGuestUserRequest]) (*connect.Response[_go.CreateNewGuestUserResponse], error)
	GuestLogin(context.Context, *connect.Request[_go.GuestLoginRequest]) (*connect.Response[_go.GuestLoginResponse], error)
	GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.UserProfileResponse], error)
	GetPlayersProfile(context.Context, *connect.Request[_go.PlayersProfileRequest]) (*connect.Response[_go.PlayersProfileResponse], error)
	CreateLobby(context.Context, *connect.Request[_go.CreateLobbyRequest]) (*connect.Response[_go.CreateLobbyResponse], error)
	GetLobby(context.Context, *connect.Request[_go.GetLobbyRequest]) (*connect.Response[_go.GetLobbyReply], error)
	StreamLobby(context.Context, *connect.Request[_go.GetLobbyRequest], *connect.ServerStream[_go.GetLobbyReply]) error
	JoinLobby(context.Context, *connect.Request[_go.JoinLobbyRequest]) (*connect.Response[_go.JoinLobbyResponse], error)
	LeaveLobby(context.Context, *connect.Request[_go.LeaveLobbyRequest]) (*connect.Response[_go.LeaveLobbyResponse], error)
	StartMatch(context.Context, *connect.Request[_go.StartMatchRequest]) (*connect.Response[emptypb.Empty], error)
	GetGameMetaData(context.Context, *connect.Request[_go.GetGameMetaDataRequest]) (*connect.Response[_go.GetGameMetaDataResponse], error)
	StreamGame(context.Context, *connect.Request[_go.StreamGameRequest], *connect.ServerStream[_go.StreamGameReply]) error
	PlayCards(context.Context, *connect.Request[_go.PlayCardsRequest]) (*connect.Response[emptypb.Empty], error)
	ExecuteAction(context.Context, *connect.Request[_go.ExecuteActionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewClientServerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientServerHandler(svc ClientServerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientServerMethods := _go.File_clientserver_proto.Services().ByName("ClientServer").Methods()
	clientServerRetrieveCardsDataHandler := connect.NewUnaryHandler(
		ClientServerRetrieveCardsDataProcedure,
		svc.RetrieveCardsData,
		connect.WithSchema(clientServerMethods.ByName("RetrieveCardsData")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerCreateNewGuestUserHandler := connect.NewUnaryHandler(
		ClientServerCreateNewGuestUserProcedure,
		svc.CreateNewGuestUser,
		connect.WithSchema(clientServerMethods.ByName("CreateNewGuestUser")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerGuestLoginHandler := connect.NewUnaryHandler(
		ClientServerGuestLoginProcedure,
		svc.GuestLogin,
		connect.WithSchema(clientServerMethods.ByName("GuestLogin")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerGetUserProfileHandler := connect.NewUnaryHandler(
		ClientServerGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(clientServerMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerGetPlayersProfileHandler := connect.NewUnaryHandler(
		ClientServerGetPlayersProfileProcedure,
		svc.GetPlayersProfile,
		connect.WithSchema(clientServerMethods.ByName("GetPlayersProfile")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerCreateLobbyHandler := connect.NewUnaryHandler(
		ClientServerCreateLobbyProcedure,
		svc.CreateLobby,
		connect.WithSchema(clientServerMethods.ByName("CreateLobby")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerGetLobbyHandler := connect.NewUnaryHandler(
		ClientServerGetLobbyProcedure,
		svc.GetLobby,
		connect.WithSchema(clientServerMethods.ByName("GetLobby")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerStreamLobbyHandler := connect.NewServerStreamHandler(
		ClientServerStreamLobbyProcedure,
		svc.StreamLobby,
		connect.WithSchema(clientServerMethods.ByName("StreamLobby")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerJoinLobbyHandler := connect.NewUnaryHandler(
		ClientServerJoinLobbyProcedure,
		svc.JoinLobby,
		connect.WithSchema(clientServerMethods.ByName("JoinLobby")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerLeaveLobbyHandler := connect.NewUnaryHandler(
		ClientServerLeaveLobbyProcedure,
		svc.LeaveLobby,
		connect.WithSchema(clientServerMethods.ByName("LeaveLobby")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerStartMatchHandler := connect.NewUnaryHandler(
		ClientServerStartMatchProcedure,
		svc.StartMatch,
		connect.WithSchema(clientServerMethods.ByName("StartMatch")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerGetGameMetaDataHandler := connect.NewUnaryHandler(
		ClientServerGetGameMetaDataProcedure,
		svc.GetGameMetaData,
		connect.WithSchema(clientServerMethods.ByName("GetGameMetaData")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerStreamGameHandler := connect.NewServerStreamHandler(
		ClientServerStreamGameProcedure,
		svc.StreamGame,
		connect.WithSchema(clientServerMethods.ByName("StreamGame")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerPlayCardsHandler := connect.NewUnaryHandler(
		ClientServerPlayCardsProcedure,
		svc.PlayCards,
		connect.WithSchema(clientServerMethods.ByName("PlayCards")),
		connect.WithHandlerOptions(opts...),
	)
	clientServerExecuteActionHandler := connect.NewUnaryHandler(
		ClientServerExecuteActionProcedure,
		svc.ExecuteAction,
		connect.WithSchema(clientServerMethods.ByName("ExecuteAction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.sweetloveinyourheart.kittens.clients.ClientServer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientServerRetrieveCardsDataProcedure:
			clientServerRetrieveCardsDataHandler.ServeHTTP(w, r)
		case ClientServerCreateNewGuestUserProcedure:
			clientServerCreateNewGuestUserHandler.ServeHTTP(w, r)
		case ClientServerGuestLoginProcedure:
			clientServerGuestLoginHandler.ServeHTTP(w, r)
		case ClientServerGetUserProfileProcedure:
			clientServerGetUserProfileHandler.ServeHTTP(w, r)
		case ClientServerGetPlayersProfileProcedure:
			clientServerGetPlayersProfileHandler.ServeHTTP(w, r)
		case ClientServerCreateLobbyProcedure:
			clientServerCreateLobbyHandler.ServeHTTP(w, r)
		case ClientServerGetLobbyProcedure:
			clientServerGetLobbyHandler.ServeHTTP(w, r)
		case ClientServerStreamLobbyProcedure:
			clientServerStreamLobbyHandler.ServeHTTP(w, r)
		case ClientServerJoinLobbyProcedure:
			clientServerJoinLobbyHandler.ServeHTTP(w, r)
		case ClientServerLeaveLobbyProcedure:
			clientServerLeaveLobbyHandler.ServeHTTP(w, r)
		case ClientServerStartMatchProcedure:
			clientServerStartMatchHandler.ServeHTTP(w, r)
		case ClientServerGetGameMetaDataProcedure:
			clientServerGetGameMetaDataHandler.ServeHTTP(w, r)
		case ClientServerStreamGameProcedure:
			clientServerStreamGameHandler.ServeHTTP(w, r)
		case ClientServerPlayCardsProcedure:
			clientServerPlayCardsHandler.ServeHTTP(w, r)
		case ClientServerExecuteActionProcedure:
			clientServerExecuteActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientServerHandler returns CodeUnimplemented from all methods.
type UnimplementedClientServerHandler struct{}

func (UnimplementedClientServerHandler) RetrieveCardsData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.RetrieveCardsDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.RetrieveCardsData is not implemented"))
}

func (UnimplementedClientServerHandler) CreateNewGuestUser(context.Context, *connect.Request[_go.CreateNewGuestUserRequest]) (*connect.Response[_go.CreateNewGuestUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.CreateNewGuestUser is not implemented"))
}

func (UnimplementedClientServerHandler) GuestLogin(context.Context, *connect.Request[_go.GuestLoginRequest]) (*connect.Response[_go.GuestLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.GuestLogin is not implemented"))
}

func (UnimplementedClientServerHandler) GetUserProfile(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[_go.UserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.GetUserProfile is not implemented"))
}

func (UnimplementedClientServerHandler) GetPlayersProfile(context.Context, *connect.Request[_go.PlayersProfileRequest]) (*connect.Response[_go.PlayersProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.GetPlayersProfile is not implemented"))
}

func (UnimplementedClientServerHandler) CreateLobby(context.Context, *connect.Request[_go.CreateLobbyRequest]) (*connect.Response[_go.CreateLobbyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.CreateLobby is not implemented"))
}

func (UnimplementedClientServerHandler) GetLobby(context.Context, *connect.Request[_go.GetLobbyRequest]) (*connect.Response[_go.GetLobbyReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.GetLobby is not implemented"))
}

func (UnimplementedClientServerHandler) StreamLobby(context.Context, *connect.Request[_go.GetLobbyRequest], *connect.ServerStream[_go.GetLobbyReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.StreamLobby is not implemented"))
}

func (UnimplementedClientServerHandler) JoinLobby(context.Context, *connect.Request[_go.JoinLobbyRequest]) (*connect.Response[_go.JoinLobbyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.JoinLobby is not implemented"))
}

func (UnimplementedClientServerHandler) LeaveLobby(context.Context, *connect.Request[_go.LeaveLobbyRequest]) (*connect.Response[_go.LeaveLobbyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.LeaveLobby is not implemented"))
}

func (UnimplementedClientServerHandler) StartMatch(context.Context, *connect.Request[_go.StartMatchRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.StartMatch is not implemented"))
}

func (UnimplementedClientServerHandler) GetGameMetaData(context.Context, *connect.Request[_go.GetGameMetaDataRequest]) (*connect.Response[_go.GetGameMetaDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.GetGameMetaData is not implemented"))
}

func (UnimplementedClientServerHandler) StreamGame(context.Context, *connect.Request[_go.StreamGameRequest], *connect.ServerStream[_go.StreamGameReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.StreamGame is not implemented"))
}

func (UnimplementedClientServerHandler) PlayCards(context.Context, *connect.Request[_go.PlayCardsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.PlayCards is not implemented"))
}

func (UnimplementedClientServerHandler) ExecuteAction(context.Context, *connect.Request[_go.ExecuteActionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.kittens.clients.ClientServer.ExecuteAction is not implemented"))
}
