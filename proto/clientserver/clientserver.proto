syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "github.com/sweetloveinyourheart/exploding-kittens/proto/code/clientserver/go;grpc";

package com.sweetloveinyourheart.kittens.clients;

service ClientServer {
    rpc RetrieveCardsData(google.protobuf.Empty) returns (RetrieveCardsDataResponse);

    rpc CreateNewGuestUser(CreateNewGuestUserRequest) returns (CreateNewGuestUserResponse);
    rpc GuestLogin(GuestLoginRequest) returns (GuestLoginResponse);
    rpc GetUserProfile(google.protobuf.Empty) returns (UserProfileResponse);
    rpc GetPlayersProfile(PlayersProfileRequest) returns (PlayersProfileResponse);
    
    rpc CreateLobby(CreateLobbyRequest) returns (CreateLobbyResponse);
    rpc GetLobby(GetLobbyRequest) returns (GetLobbyReply);
    rpc StreamLobby(GetLobbyRequest) returns (stream GetLobbyReply);
    rpc JoinLobby(JoinLobbyRequest) returns (JoinLobbyResponse);
    rpc LeaveLobby(LeaveLobbyRequest) returns (LeaveLobbyResponse);
    rpc StartMatch(StartMatchRequest) returns (google.protobuf.Empty);

    rpc GetGameMetaData(GetGameMetaDataRequest) returns (GetGameMetaDataResponse);
    rpc StreamGame(StreamGameRequest) returns (stream StreamGameReply);

    rpc PlayCards(PlayCardsRequest) returns (google.protobuf.Empty);
}

// ========= Data Provider =============

message Card {
    string card_id = 1;
    string name = 2;
    string code = 3;
    string description = 4;
}

message RetrieveCardsDataResponse {
    repeated Card cards = 1;
}

// ========= User ==========

message User {
    string user_id = 1;
    string username = 2;
    string full_name = 3;
    int32 status = 4;
}

// Message for creating a new guest user
message CreateNewGuestUserRequest {
    string username = 1; // Required: Username of the guest user
    string full_name = 2; // Required: Full name of the guest user
}
  
message CreateNewGuestUserResponse {
    User user = 1; // The user basic info
}
  
// Message for guest login
message GuestLoginRequest {
    string user_id = 1; // Required: UUID of the guest user
}
  
message GuestLoginResponse {
    User user = 1; // The user basic info
    string token = 2; // The session token for this user.
}

message UserProfileResponse {
    User user = 1;
}

// Message for players profile
message PlayersProfileRequest {
    repeated string user_ids = 1; // Required: UUID of the guest user
}


message PlayersProfileResponse {
    repeated User users = 1;
}

// ========= Lobby ==========

message Lobby {
    string lobby_id = 1;
    string lobby_code = 2;
    string lobby_name = 3;
    string host_user_id = 4;
    repeated string participants = 5;
    optional string match_id = 6;
}

// Message for create a lobby
message CreateLobbyRequest {
    string lobby_name = 1;
}

message CreateLobbyResponse {
    string lobby_id = 1;
}

message GetLobbyRequest {
    string lobby_id = 1;
}

message GetLobbyReply {
    Lobby lobby = 1;
}

// Message for join a lobby
message JoinLobbyRequest {
    string lobby_code = 1;
}

message JoinLobbyResponse {
    string lobby_id = 1;
}

// Message for leave a lobby
message LeaveLobbyRequest {
    string lobby_id = 1;
}

message LeaveLobbyResponse {
    string lobby_id = 1;
}

// Message for start a match
message StartMatchRequest {
    string lobby_id = 1;
}

// ========== Game ===========

message Game {
    enum Phase {
        INITIALIZING = 0;    // Setting up players, shuffling and dealing cards, inserting Exploding Kittens and Defuse cards into the deck
	    TURN_START   = 1;    // Active player begins their turn
	    ACTION_PHASE = 2;    // Player can play as many action cards as they want
	    CARD_DRAWING = 3;    // Player draws one card from the deck (mandatory if they didn't Skip/Attack)
	    TURN_END     = 4;    // Finalize the turn, next player becomes active
	    GAME_OVER    = 5;    // When only one player remains
    }

    message Player {
        string player_id = 1;
        bool active = 2;
    }

    message PlayerHand {
        int32 remaining_cards = 1;
        repeated string hands = 2;
    }

    message Desk {
        string desk_id = 1;
        int32 remaining_cards = 2;
        repeated string discard_pile = 3;
    }
    
    string game_id = 1;
    Phase game_phase = 2;
    string player_turn = 3;
    repeated Player players = 4;
    map<string, PlayerHand> player_hands = 5;
    Desk desk = 6;
    string executing_action = 7;
}

message GameMetaData {
    string game_id = 1;
    repeated string players = 2;
}

message StreamGameRequest {
    string game_id = 1;
}

message StreamGameReply {
    Game game_state = 1;
}

message GetGameMetaDataRequest {
    string game_id = 1;
}

message GetGameMetaDataResponse {
    GameMetaData meta = 1;
}

// ========== Game Play ===========
message PlayCardsRequest {
    string game_id = 1;
    repeated string card_ids = 2;
}
