// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file clientserver.proto (package com.sweetloveinyourheart.kittens.clients, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string full_name = 3;
   */
  fullName = "";

  /**
   * @generated from field: int32 status = 4;
   */
  status = 0;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * Message for creating a new guest user
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest
 */
export class CreateNewGuestUserRequest extends Message<CreateNewGuestUserRequest> {
  /**
   * Required: Username of the guest user
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * Required: Full name of the guest user
   *
   * @generated from field: string full_name = 2;
   */
  fullName = "";

  constructor(data?: PartialMessage<CreateNewGuestUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNewGuestUserRequest | PlainMessage<CreateNewGuestUserRequest> | undefined, b: CreateNewGuestUserRequest | PlainMessage<CreateNewGuestUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateNewGuestUserRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse
 */
export class CreateNewGuestUserResponse extends Message<CreateNewGuestUserResponse> {
  /**
   * The user basic info
   *
   * @generated from field: com.sweetloveinyourheart.kittens.clients.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<CreateNewGuestUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNewGuestUserResponse | PlainMessage<CreateNewGuestUserResponse> | undefined, b: CreateNewGuestUserResponse | PlainMessage<CreateNewGuestUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateNewGuestUserResponse, a, b);
  }
}

/**
 * Message for guest login
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.GuestLoginRequest
 */
export class GuestLoginRequest extends Message<GuestLoginRequest> {
  /**
   * Required: UUID of the guest user
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GuestLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GuestLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GuestLoginRequest | PlainMessage<GuestLoginRequest> | undefined, b: GuestLoginRequest | PlainMessage<GuestLoginRequest> | undefined): boolean {
    return proto3.util.equals(GuestLoginRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GuestLoginResponse
 */
export class GuestLoginResponse extends Message<GuestLoginResponse> {
  /**
   * The database id for this user (UUID).
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * The session token for this user.
   *
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<GuestLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GuestLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GuestLoginResponse | PlainMessage<GuestLoginResponse> | undefined, b: GuestLoginResponse | PlainMessage<GuestLoginResponse> | undefined): boolean {
    return proto3.util.equals(GuestLoginResponse, a, b);
  }
}

/**
 * Message for player profile
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.PlayerProfileRequest
 */
export class PlayerProfileRequest extends Message<PlayerProfileRequest> {
  /**
   * Required: UUID of the guest user
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<PlayerProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.PlayerProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerProfileRequest {
    return new PlayerProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerProfileRequest {
    return new PlayerProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerProfileRequest {
    return new PlayerProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerProfileRequest | PlainMessage<PlayerProfileRequest> | undefined, b: PlayerProfileRequest | PlainMessage<PlayerProfileRequest> | undefined): boolean {
    return proto3.util.equals(PlayerProfileRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.PlayerProfileResponse
 */
export class PlayerProfileResponse extends Message<PlayerProfileResponse> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<PlayerProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.PlayerProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerProfileResponse {
    return new PlayerProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerProfileResponse {
    return new PlayerProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerProfileResponse {
    return new PlayerProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerProfileResponse | PlainMessage<PlayerProfileResponse> | undefined, b: PlayerProfileResponse | PlainMessage<PlayerProfileResponse> | undefined): boolean {
    return proto3.util.equals(PlayerProfileResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Lobby
 */
export class Lobby extends Message<Lobby> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  /**
   * @generated from field: string lobby_code = 2;
   */
  lobbyCode = "";

  /**
   * @generated from field: string lobby_name = 3;
   */
  lobbyName = "";

  /**
   * @generated from field: string host_user_id = 4;
   */
  hostUserId = "";

  /**
   * @generated from field: repeated string participants = 5;
   */
  participants: string[] = [];

  constructor(data?: PartialMessage<Lobby>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Lobby";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lobby_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lobby_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "host_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "participants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lobby {
    return new Lobby().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lobby {
    return new Lobby().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lobby {
    return new Lobby().fromJsonString(jsonString, options);
  }

  static equals(a: Lobby | PlainMessage<Lobby> | undefined, b: Lobby | PlainMessage<Lobby> | undefined): boolean {
    return proto3.util.equals(Lobby, a, b);
  }
}

/**
 * Message for create a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest
 */
export class CreateLobbyRequest extends Message<CreateLobbyRequest> {
  /**
   * @generated from field: string lobby_name = 1;
   */
  lobbyName = "";

  constructor(data?: PartialMessage<CreateLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLobbyRequest | PlainMessage<CreateLobbyRequest> | undefined, b: CreateLobbyRequest | PlainMessage<CreateLobbyRequest> | undefined): boolean {
    return proto3.util.equals(CreateLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse
 */
export class CreateLobbyResponse extends Message<CreateLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<CreateLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLobbyResponse | PlainMessage<CreateLobbyResponse> | undefined, b: CreateLobbyResponse | PlainMessage<CreateLobbyResponse> | undefined): boolean {
    return proto3.util.equals(CreateLobbyResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetLobbyRequest
 */
export class GetLobbyRequest extends Message<GetLobbyRequest> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<GetLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLobbyRequest | PlainMessage<GetLobbyRequest> | undefined, b: GetLobbyRequest | PlainMessage<GetLobbyRequest> | undefined): boolean {
    return proto3.util.equals(GetLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetLobbyReply
 */
export class GetLobbyReply extends Message<GetLobbyReply> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.Lobby lobby = 1;
   */
  lobby?: Lobby;

  constructor(data?: PartialMessage<GetLobbyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetLobbyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby", kind: "message", T: Lobby },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetLobbyReply | PlainMessage<GetLobbyReply> | undefined, b: GetLobbyReply | PlainMessage<GetLobbyReply> | undefined): boolean {
    return proto3.util.equals(GetLobbyReply, a, b);
  }
}

/**
 * Message for join a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest
 */
export class JoinLobbyRequest extends Message<JoinLobbyRequest> {
  /**
   * @generated from field: string lobby_code = 1;
   */
  lobbyCode = "";

  constructor(data?: PartialMessage<JoinLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinLobbyRequest | PlainMessage<JoinLobbyRequest> | undefined, b: JoinLobbyRequest | PlainMessage<JoinLobbyRequest> | undefined): boolean {
    return proto3.util.equals(JoinLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse
 */
export class JoinLobbyResponse extends Message<JoinLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<JoinLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinLobbyResponse | PlainMessage<JoinLobbyResponse> | undefined, b: JoinLobbyResponse | PlainMessage<JoinLobbyResponse> | undefined): boolean {
    return proto3.util.equals(JoinLobbyResponse, a, b);
  }
}

/**
 * Message for leave a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest
 */
export class LeaveLobbyRequest extends Message<LeaveLobbyRequest> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<LeaveLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveLobbyRequest | PlainMessage<LeaveLobbyRequest> | undefined, b: LeaveLobbyRequest | PlainMessage<LeaveLobbyRequest> | undefined): boolean {
    return proto3.util.equals(LeaveLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse
 */
export class LeaveLobbyResponse extends Message<LeaveLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<LeaveLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveLobbyResponse | PlainMessage<LeaveLobbyResponse> | undefined, b: LeaveLobbyResponse | PlainMessage<LeaveLobbyResponse> | undefined): boolean {
    return proto3.util.equals(LeaveLobbyResponse, a, b);
  }
}

