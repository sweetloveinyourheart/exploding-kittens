// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file clientserver.proto (package com.sweetloveinyourheart.kittens.clients, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Card
 */
export class Card extends Message<Card> {
  /**
   * @generated from field: string card_id = 1;
   */
  cardId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(a: Card | PlainMessage<Card> | undefined, b: Card | PlainMessage<Card> | undefined): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.RetrieveCardsDataResponse
 */
export class RetrieveCardsDataResponse extends Message<RetrieveCardsDataResponse> {
  /**
   * @generated from field: repeated com.sweetloveinyourheart.kittens.clients.Card cards = 1;
   */
  cards: Card[] = [];

  constructor(data?: PartialMessage<RetrieveCardsDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.RetrieveCardsDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cards", kind: "message", T: Card, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetrieveCardsDataResponse {
    return new RetrieveCardsDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetrieveCardsDataResponse {
    return new RetrieveCardsDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetrieveCardsDataResponse {
    return new RetrieveCardsDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetrieveCardsDataResponse | PlainMessage<RetrieveCardsDataResponse> | undefined, b: RetrieveCardsDataResponse | PlainMessage<RetrieveCardsDataResponse> | undefined): boolean {
    return proto3.util.equals(RetrieveCardsDataResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string full_name = 3;
   */
  fullName = "";

  /**
   * @generated from field: int32 status = 4;
   */
  status = 0;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * Message for creating a new guest user
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest
 */
export class CreateNewGuestUserRequest extends Message<CreateNewGuestUserRequest> {
  /**
   * Required: Username of the guest user
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * Required: Full name of the guest user
   *
   * @generated from field: string full_name = 2;
   */
  fullName = "";

  constructor(data?: PartialMessage<CreateNewGuestUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "full_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNewGuestUserRequest {
    return new CreateNewGuestUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNewGuestUserRequest | PlainMessage<CreateNewGuestUserRequest> | undefined, b: CreateNewGuestUserRequest | PlainMessage<CreateNewGuestUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateNewGuestUserRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse
 */
export class CreateNewGuestUserResponse extends Message<CreateNewGuestUserResponse> {
  /**
   * The user basic info
   *
   * @generated from field: com.sweetloveinyourheart.kittens.clients.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<CreateNewGuestUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateNewGuestUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNewGuestUserResponse {
    return new CreateNewGuestUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNewGuestUserResponse | PlainMessage<CreateNewGuestUserResponse> | undefined, b: CreateNewGuestUserResponse | PlainMessage<CreateNewGuestUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateNewGuestUserResponse, a, b);
  }
}

/**
 * Message for guest login
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.GuestLoginRequest
 */
export class GuestLoginRequest extends Message<GuestLoginRequest> {
  /**
   * Required: UUID of the guest user
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GuestLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GuestLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GuestLoginRequest {
    return new GuestLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GuestLoginRequest | PlainMessage<GuestLoginRequest> | undefined, b: GuestLoginRequest | PlainMessage<GuestLoginRequest> | undefined): boolean {
    return proto3.util.equals(GuestLoginRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GuestLoginResponse
 */
export class GuestLoginResponse extends Message<GuestLoginResponse> {
  /**
   * The user basic info
   *
   * @generated from field: com.sweetloveinyourheart.kittens.clients.User user = 1;
   */
  user?: User;

  /**
   * The session token for this user.
   *
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<GuestLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GuestLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GuestLoginResponse {
    return new GuestLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GuestLoginResponse | PlainMessage<GuestLoginResponse> | undefined, b: GuestLoginResponse | PlainMessage<GuestLoginResponse> | undefined): boolean {
    return proto3.util.equals(GuestLoginResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.UserProfileResponse
 */
export class UserProfileResponse extends Message<UserProfileResponse> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.UserProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfileResponse {
    return new UserProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfileResponse {
    return new UserProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfileResponse {
    return new UserProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfileResponse | PlainMessage<UserProfileResponse> | undefined, b: UserProfileResponse | PlainMessage<UserProfileResponse> | undefined): boolean {
    return proto3.util.equals(UserProfileResponse, a, b);
  }
}

/**
 * Message for players profile
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.PlayersProfileRequest
 */
export class PlayersProfileRequest extends Message<PlayersProfileRequest> {
  /**
   * Required: UUID of the guest user
   *
   * @generated from field: repeated string user_ids = 1;
   */
  userIds: string[] = [];

  constructor(data?: PartialMessage<PlayersProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.PlayersProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayersProfileRequest {
    return new PlayersProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayersProfileRequest {
    return new PlayersProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayersProfileRequest {
    return new PlayersProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PlayersProfileRequest | PlainMessage<PlayersProfileRequest> | undefined, b: PlayersProfileRequest | PlainMessage<PlayersProfileRequest> | undefined): boolean {
    return proto3.util.equals(PlayersProfileRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.PlayersProfileResponse
 */
export class PlayersProfileResponse extends Message<PlayersProfileResponse> {
  /**
   * @generated from field: repeated com.sweetloveinyourheart.kittens.clients.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<PlayersProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.PlayersProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayersProfileResponse {
    return new PlayersProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayersProfileResponse {
    return new PlayersProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayersProfileResponse {
    return new PlayersProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PlayersProfileResponse | PlainMessage<PlayersProfileResponse> | undefined, b: PlayersProfileResponse | PlainMessage<PlayersProfileResponse> | undefined): boolean {
    return proto3.util.equals(PlayersProfileResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Lobby
 */
export class Lobby extends Message<Lobby> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  /**
   * @generated from field: string lobby_code = 2;
   */
  lobbyCode = "";

  /**
   * @generated from field: string lobby_name = 3;
   */
  lobbyName = "";

  /**
   * @generated from field: string host_user_id = 4;
   */
  hostUserId = "";

  /**
   * @generated from field: repeated string participants = 5;
   */
  participants: string[] = [];

  /**
   * @generated from field: optional string match_id = 6;
   */
  matchId?: string;

  constructor(data?: PartialMessage<Lobby>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Lobby";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lobby_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lobby_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "host_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "participants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lobby {
    return new Lobby().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lobby {
    return new Lobby().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lobby {
    return new Lobby().fromJsonString(jsonString, options);
  }

  static equals(a: Lobby | PlainMessage<Lobby> | undefined, b: Lobby | PlainMessage<Lobby> | undefined): boolean {
    return proto3.util.equals(Lobby, a, b);
  }
}

/**
 * Message for create a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest
 */
export class CreateLobbyRequest extends Message<CreateLobbyRequest> {
  /**
   * @generated from field: string lobby_name = 1;
   */
  lobbyName = "";

  constructor(data?: PartialMessage<CreateLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLobbyRequest {
    return new CreateLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLobbyRequest | PlainMessage<CreateLobbyRequest> | undefined, b: CreateLobbyRequest | PlainMessage<CreateLobbyRequest> | undefined): boolean {
    return proto3.util.equals(CreateLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse
 */
export class CreateLobbyResponse extends Message<CreateLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<CreateLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.CreateLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateLobbyResponse {
    return new CreateLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateLobbyResponse | PlainMessage<CreateLobbyResponse> | undefined, b: CreateLobbyResponse | PlainMessage<CreateLobbyResponse> | undefined): boolean {
    return proto3.util.equals(CreateLobbyResponse, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetLobbyRequest
 */
export class GetLobbyRequest extends Message<GetLobbyRequest> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<GetLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLobbyRequest {
    return new GetLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLobbyRequest | PlainMessage<GetLobbyRequest> | undefined, b: GetLobbyRequest | PlainMessage<GetLobbyRequest> | undefined): boolean {
    return proto3.util.equals(GetLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetLobbyReply
 */
export class GetLobbyReply extends Message<GetLobbyReply> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.Lobby lobby = 1;
   */
  lobby?: Lobby;

  constructor(data?: PartialMessage<GetLobbyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetLobbyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby", kind: "message", T: Lobby },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLobbyReply {
    return new GetLobbyReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetLobbyReply | PlainMessage<GetLobbyReply> | undefined, b: GetLobbyReply | PlainMessage<GetLobbyReply> | undefined): boolean {
    return proto3.util.equals(GetLobbyReply, a, b);
  }
}

/**
 * Message for join a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest
 */
export class JoinLobbyRequest extends Message<JoinLobbyRequest> {
  /**
   * @generated from field: string lobby_code = 1;
   */
  lobbyCode = "";

  constructor(data?: PartialMessage<JoinLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.JoinLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinLobbyRequest {
    return new JoinLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinLobbyRequest | PlainMessage<JoinLobbyRequest> | undefined, b: JoinLobbyRequest | PlainMessage<JoinLobbyRequest> | undefined): boolean {
    return proto3.util.equals(JoinLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse
 */
export class JoinLobbyResponse extends Message<JoinLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<JoinLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.JoinLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinLobbyResponse {
    return new JoinLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinLobbyResponse | PlainMessage<JoinLobbyResponse> | undefined, b: JoinLobbyResponse | PlainMessage<JoinLobbyResponse> | undefined): boolean {
    return proto3.util.equals(JoinLobbyResponse, a, b);
  }
}

/**
 * Message for leave a lobby
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest
 */
export class LeaveLobbyRequest extends Message<LeaveLobbyRequest> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<LeaveLobbyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.LeaveLobbyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveLobbyRequest {
    return new LeaveLobbyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveLobbyRequest | PlainMessage<LeaveLobbyRequest> | undefined, b: LeaveLobbyRequest | PlainMessage<LeaveLobbyRequest> | undefined): boolean {
    return proto3.util.equals(LeaveLobbyRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse
 */
export class LeaveLobbyResponse extends Message<LeaveLobbyResponse> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<LeaveLobbyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.LeaveLobbyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveLobbyResponse {
    return new LeaveLobbyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveLobbyResponse | PlainMessage<LeaveLobbyResponse> | undefined, b: LeaveLobbyResponse | PlainMessage<LeaveLobbyResponse> | undefined): boolean {
    return proto3.util.equals(LeaveLobbyResponse, a, b);
  }
}

/**
 * Message for start a match
 *
 * @generated from message com.sweetloveinyourheart.kittens.clients.StartMatchRequest
 */
export class StartMatchRequest extends Message<StartMatchRequest> {
  /**
   * @generated from field: string lobby_id = 1;
   */
  lobbyId = "";

  constructor(data?: PartialMessage<StartMatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.StartMatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartMatchRequest {
    return new StartMatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartMatchRequest {
    return new StartMatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartMatchRequest {
    return new StartMatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartMatchRequest | PlainMessage<StartMatchRequest> | undefined, b: StartMatchRequest | PlainMessage<StartMatchRequest> | undefined): boolean {
    return proto3.util.equals(StartMatchRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Game
 */
export class Game extends Message<Game> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.Game.Phase game_phase = 2;
   */
  gamePhase = Game_Phase.INITIALIZING;

  /**
   * @generated from field: string player_turn = 3;
   */
  playerTurn = "";

  /**
   * @generated from field: repeated com.sweetloveinyourheart.kittens.clients.Game.Player players = 4;
   */
  players: Game_Player[] = [];

  /**
   * @generated from field: map<string, com.sweetloveinyourheart.kittens.clients.Game.PlayerHand> player_hands = 5;
   */
  playerHands: { [key: string]: Game_PlayerHand } = {};

  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.Game.Desk desk = 6;
   */
  desk?: Game_Desk;

  /**
   * @generated from field: repeated string discard_pile = 7;
   */
  discardPile: string[] = [];

  constructor(data?: PartialMessage<Game>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Game";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "game_phase", kind: "enum", T: proto3.getEnumType(Game_Phase) },
    { no: 3, name: "player_turn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "players", kind: "message", T: Game_Player, repeated: true },
    { no: 5, name: "player_hands", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Game_PlayerHand} },
    { no: 6, name: "desk", kind: "message", T: Game_Desk },
    { no: 7, name: "discard_pile", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game {
    return new Game().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game {
    return new Game().fromJsonString(jsonString, options);
  }

  static equals(a: Game | PlainMessage<Game> | undefined, b: Game | PlainMessage<Game> | undefined): boolean {
    return proto3.util.equals(Game, a, b);
  }
}

/**
 * @generated from enum com.sweetloveinyourheart.kittens.clients.Game.Phase
 */
export enum Game_Phase {
  /**
   * Setting up players, shuffling and dealing cards, inserting Exploding Kittens and Defuse cards into the deck
   *
   * @generated from enum value: INITIALIZING = 0;
   */
  INITIALIZING = 0,

  /**
   * Active player begins their turn
   *
   * @generated from enum value: TURN_START = 1;
   */
  TURN_START = 1,

  /**
   * Player can play as many action cards as they want
   *
   * @generated from enum value: ACTION_PHASE = 2;
   */
  ACTION_PHASE = 2,

  /**
   * Player draws one card from the deck (mandatory if they didn't Skip/Attack)
   *
   * @generated from enum value: CARD_DRAWING = 3;
   */
  CARD_DRAWING = 3,

  /**
   * Finalize the turn, next player becomes active
   *
   * @generated from enum value: TURN_END = 4;
   */
  TURN_END = 4,

  /**
   * When only one player remains
   *
   * @generated from enum value: GAME_OVER = 5;
   */
  GAME_OVER = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Game_Phase)
proto3.util.setEnumType(Game_Phase, "com.sweetloveinyourheart.kittens.clients.Game.Phase", [
  { no: 0, name: "INITIALIZING" },
  { no: 1, name: "TURN_START" },
  { no: 2, name: "ACTION_PHASE" },
  { no: 3, name: "CARD_DRAWING" },
  { no: 4, name: "TURN_END" },
  { no: 5, name: "GAME_OVER" },
]);

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Game.Player
 */
export class Game_Player extends Message<Game_Player> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<Game_Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Game.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game_Player {
    return new Game_Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game_Player {
    return new Game_Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game_Player {
    return new Game_Player().fromJsonString(jsonString, options);
  }

  static equals(a: Game_Player | PlainMessage<Game_Player> | undefined, b: Game_Player | PlainMessage<Game_Player> | undefined): boolean {
    return proto3.util.equals(Game_Player, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Game.PlayerHand
 */
export class Game_PlayerHand extends Message<Game_PlayerHand> {
  /**
   * @generated from field: int32 remaining_cards = 1;
   */
  remainingCards = 0;

  /**
   * @generated from field: repeated string hands = 2;
   */
  hands: string[] = [];

  constructor(data?: PartialMessage<Game_PlayerHand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Game.PlayerHand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remaining_cards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "hands", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game_PlayerHand {
    return new Game_PlayerHand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game_PlayerHand {
    return new Game_PlayerHand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game_PlayerHand {
    return new Game_PlayerHand().fromJsonString(jsonString, options);
  }

  static equals(a: Game_PlayerHand | PlainMessage<Game_PlayerHand> | undefined, b: Game_PlayerHand | PlainMessage<Game_PlayerHand> | undefined): boolean {
    return proto3.util.equals(Game_PlayerHand, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.Game.Desk
 */
export class Game_Desk extends Message<Game_Desk> {
  /**
   * @generated from field: string desk_id = 1;
   */
  deskId = "";

  /**
   * @generated from field: int32 remaining_cards = 2;
   */
  remainingCards = 0;

  constructor(data?: PartialMessage<Game_Desk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.Game.Desk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desk_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remaining_cards", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Game_Desk {
    return new Game_Desk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Game_Desk {
    return new Game_Desk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Game_Desk {
    return new Game_Desk().fromJsonString(jsonString, options);
  }

  static equals(a: Game_Desk | PlainMessage<Game_Desk> | undefined, b: Game_Desk | PlainMessage<Game_Desk> | undefined): boolean {
    return proto3.util.equals(Game_Desk, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GameMetaData
 */
export class GameMetaData extends Message<GameMetaData> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: repeated string players = 2;
   */
  players: string[] = [];

  constructor(data?: PartialMessage<GameMetaData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GameMetaData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "players", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameMetaData {
    return new GameMetaData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameMetaData {
    return new GameMetaData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameMetaData {
    return new GameMetaData().fromJsonString(jsonString, options);
  }

  static equals(a: GameMetaData | PlainMessage<GameMetaData> | undefined, b: GameMetaData | PlainMessage<GameMetaData> | undefined): boolean {
    return proto3.util.equals(GameMetaData, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.StreamGameRequest
 */
export class StreamGameRequest extends Message<StreamGameRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<StreamGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.StreamGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGameRequest {
    return new StreamGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGameRequest {
    return new StreamGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGameRequest {
    return new StreamGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGameRequest | PlainMessage<StreamGameRequest> | undefined, b: StreamGameRequest | PlainMessage<StreamGameRequest> | undefined): boolean {
    return proto3.util.equals(StreamGameRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.StreamGameReply
 */
export class StreamGameReply extends Message<StreamGameReply> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.Game game_state = 1;
   */
  gameState?: Game;

  constructor(data?: PartialMessage<StreamGameReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.StreamGameReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_state", kind: "message", T: Game },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGameReply {
    return new StreamGameReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGameReply {
    return new StreamGameReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGameReply {
    return new StreamGameReply().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGameReply | PlainMessage<StreamGameReply> | undefined, b: StreamGameReply | PlainMessage<StreamGameReply> | undefined): boolean {
    return proto3.util.equals(StreamGameReply, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetGameMetaDataRequest
 */
export class GetGameMetaDataRequest extends Message<GetGameMetaDataRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<GetGameMetaDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetGameMetaDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGameMetaDataRequest {
    return new GetGameMetaDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGameMetaDataRequest {
    return new GetGameMetaDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGameMetaDataRequest {
    return new GetGameMetaDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGameMetaDataRequest | PlainMessage<GetGameMetaDataRequest> | undefined, b: GetGameMetaDataRequest | PlainMessage<GetGameMetaDataRequest> | undefined): boolean {
    return proto3.util.equals(GetGameMetaDataRequest, a, b);
  }
}

/**
 * @generated from message com.sweetloveinyourheart.kittens.clients.GetGameMetaDataResponse
 */
export class GetGameMetaDataResponse extends Message<GetGameMetaDataResponse> {
  /**
   * @generated from field: com.sweetloveinyourheart.kittens.clients.GameMetaData meta = 1;
   */
  meta?: GameMetaData;

  constructor(data?: PartialMessage<GetGameMetaDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.sweetloveinyourheart.kittens.clients.GetGameMetaDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: GameMetaData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGameMetaDataResponse {
    return new GetGameMetaDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGameMetaDataResponse {
    return new GetGameMetaDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGameMetaDataResponse {
    return new GetGameMetaDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGameMetaDataResponse | PlainMessage<GetGameMetaDataResponse> | undefined, b: GetGameMetaDataResponse | PlainMessage<GetGameMetaDataResponse> | undefined): boolean {
    return proto3.util.equals(GetGameMetaDataResponse, a, b);
  }
}

